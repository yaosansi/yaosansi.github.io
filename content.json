{"meta":{"title":"yaosansi's blog","subtitle":"技术改变世界，产品改变生活","description":"yaosansi's blog | 技术改变世界，产品改变生活","author":"yaosansi","url":"http://www.yaosansi.com"},"pages":[{"title":"","date":"2015-04-16T09:38:33.872Z","updated":"2015-04-16T09:38:33.872Z","comments":true,"path":"404.html","permalink":"http://www.yaosansi.com/404.html","excerpt":"","text":"var l=window.location.href; var goUrl=\"\"; var dict={\"post/1395.html\":\"http://www.yaosansi.com/post/memcached-on-windows/\", \"post/1396.html\":\"http://www.yaosansi.com/post/memcached-on-windows/\"} for(var url in dict) { if(l.indexOf(url) != -1){ document.write(''); document.write('') } }"},{"title":"Dev Tools","date":"2014-07-25T02:00:00.000Z","updated":"2015-04-27T05:39:01.965Z","comments":true,"path":"dev/index.html","permalink":"http://www.yaosansi.com/dev/index.html","excerpt":"","text":"本内容不定期更新 本文最后更新于：2015-04-23 12:44:50原文：http://www.yaosansi.com/dev/ 语言前端编码规范 编码规范(HTML&amp;CSS):http://codeguide.bootcss.com 编码规范(HTML&amp;CSS):http://zoomzhao.github.io/code-guide/ GitHub CSS styleguide:https://github.com/styleguide/css CSS预处理器 SASS http://sass-lang.com/ LESS http://lesscss.org/ Stylus http://www.stylus.com/ JavaScript加载器 LABjs http://labjs.com/JavaScript文件加载器 SeaJS http://seajs.org/专注于Web 浏览器端的模块加载器,遵循的是 CMD （通用模块定义）规范 RequireJS http://www.requirejs.org/遵循的是 AMD（异步模块定义）规范 JavaScript框架 jQuery http://jquery.com/ AngularJS https://angularjs.org/ Google创建的一种框架，目标是为了简化单一页面应用（SPA）的创建，是增强基于Web应用，并带有MVC功能，使得开发和测试变得更加容易。 Ember.js http://emberjs.com/ Ember.js是一个用于创建web应用的JavaScript MVC 框架，其采用基于字符串的Handlebars模板，支持双向绑定、观察者模式、计算属性（依赖其他属性动态变化）、自动更新模板、路由控制、状态机等。 ReactJS http://facebook.github.io/react由Facebook创建,一个更高效、具有更高性能、速度更快的类库 knockoutjs http://knockoutjs.com/ >> Knockout应用开发指南（完整版） Knockout.js官方实战教程100 Knockoutjs是一个JavaScript实现的MVVM框架.主要有如下几个功能 Declarative bindings Observables and dependency tracking Templating AvalonJS http://avalonjs.github.io/ >> 视频讲座 avalon是由博客园的司徒正美创建的，是一个简单易用迷你的MVVM框架，它最早发布于2012.09.15，为解决同一业务逻辑存在各种视图呈现而开发出来的。 CSS框架 Bootstrap http://v3.bootcss.com/ Bootstrap 由Twitter推出的一个用于前端开发的开源工具包,是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。 Nodejs node.js:http://nodejs.org/ npm:https://www.npmjs.org/nodejs的包依赖管理 bower:http://bower.io/javascript的包依赖管理,自动安装依赖组件,组件依赖检测,版本兼容性检测 测试 Jasmine:http://jasmine.github.io/单元测试工具 Karma:http://karma-runner.github.io/ 自动化构建自动化完成单元测试 Gulp:http://gulpjs.com/构建,预览,测试项目 Grunt:http://gruntjs.com/统一项目管理-代码合并,压缩和混淆工具 工作流 Yeoman:(http://yeoman.io/提供一系列健壮的工具、程序库和工作流,快速创建,自动编译,自动检测,内置HTTP服务器,图像优化等 代码整理 JSHint http://jshint.com/ jslint:http://www.jslint.com/ UglifyJS2:http://lisperator.net/uglifyjs/合并压缩混淆JS代码 编辑器 Sublime Text http://www.sublimetext.com/轻量级的、速度飞快的用于编程的文本编辑器 WebStorm https://www.jetbrains.com/webstorm/专注于HTML、CSS和JavaScript开发 Atom https://atom.io/GitHub推出的一款开源的免费富文本编辑器 其它 impress.js:https://github.com/bartaz/impress.js/impress.js 不仅仅是PPT im_demo:http://bartaz.github.com/impress.jsimpress.js示例 typescript http://www.typescriptlang.org/ TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 Python Python教程(廖雪峰):http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000 Go Go 编程基础:https://github.com/Unknwon/go-fundamental-programming Go Web编程:https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/preface.md Go Web编程_EN:https://github.com/astaxie/build-web-application-with-golang/blob/master/en/eBook/preface.md .Net性能测试 dotTrace https://www.jetbrains.com/profiler/帮你理解SQL查询如何影响应用性能 glimpse http://getglimpse.com/ 一款.NET下的性能测试工具，支持asp.net 、asp.net mvc, EF等等，优势在于，不需要修改原项目任何代码，且能输出代码执行各个环节的执行时间 ，安装方式非常简单，通过nuget直接安装即可。 MvcMiniProfiler http://miniprofiler.com/ 一款由stackoverflow.com团队开发，专门针对ASP.NET MVC站点进行性能调试的工具，同时，其中的MvcMiniprofiler.EntityFramework组件，能直接输出当前页面执行了哪些SQL语句。 后台任务 Hangfire http://docs.hangfire.io/en/latest/ Hangfire是一个开源且商业免费使用的工具函数库。可以让你非常容易地在ASP.NET应用（也可以不在ASP.NET应用）中执行多种类型的后台任务，而无需自行定制开发和管理基于Windows Service后台任务执行器。且任务信息可以被持久保存。内置提供集成化的控制台。通过Nuget就可以在你的应用程序中安装Hangfire：Install-Package Hangfire。 开发辅助工具调试 Fiddler http://www.telerik.com/fiddler Rosin http://alloyteam.github.io/Rosin/Rosin是一个Fiddler插件，协助开发者进行移动端页面开发调试，是移动端web开发、调试利器。 #工具 Markdown教程/文档 Markdown语法:http://daringfireball.net/projects/markdown/syntax Markdown—入门指南:http://jianshu.io/p/1e402922ee32 Markdown 语法说明（简体中文版）:http://wowubuntu.com/markdown/ Markdown快速入门:http://wowubuntu.com/markdown/basic.html Markdown基础:http://www.yaosansi.com/post/markdown-on-githubGitHub上Markdown基本使用 MD格式转换:https://github.com/limingth/share/blob/master/markdown-demo/demo.md`转换Markdown到html/doc/pdf/ppt格式`` 环境工具 Markdown在线编辑器:http://mahua.jser.me/在线Markdown编辑器支持Vim模式 Cmd https://www.zybuluo.com/mdeditor在线 Markdown 编辑阅读器 MarkdownPad2:http://www.markdownpad.com/ ·Windows最好用的所见即所得MarkDown编辑器· ReText:http://sourceforge.net/p/retext/home/ReText/Linux下的MarkDown编辑器 Mou:http://mouapp.com/Mac下的MarkDown编辑器 ##Git 教程文档 Git教程(廖雪峰):http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000最易懂的GIT教程 工具 SourceTree http://www.sourcetreeapp.com/ 在线工具 ProcessOn :http://www.processon.com/ProcessOn是一个在线协作绘图平台,为用户提供最强大、易用的作图工具! 支持在线创作流程图、BPMN、UML图、UI界面原型设计、iOS界面原型设计等 百度脑图:http://naotu.baidu.com/便捷的脑图编辑工具,支持思维导图，组织架构图等 Convertico http://www.convertico.com/ #网络与服务器 网络测试 奇云测 http://ce.cloud.360.cn/ 多地PING http://ping.chinaz.com/ 服务器压力测试 ab http://httpd.apache.org/docs/current/programs/ab.htmlApache HTTP server benchmarking tool Apache JMete http://jmeter.apache.org/ Apache JMeter是一个专门为运行和服务器装载测试而设计的、100％的纯Java桌面运行程序。原先它是为Web/HTTP测试而设计的，但是它已经扩展以 支持各种各样的测试模块。它和用于HTTP和SQL数据库（使用JDBC）的模块一起运送。它可以用来测试静止资料库或者活动资料库中的服务器的运行情 况，可以用来模拟对服务器或者网络系统加以重负荷以测试它的抵抗力，或者用来分析不同负荷类型下的所有运行情况。它也提供了一个可替换的界面用来定制数据 显示，测试同步及测试的创建和执行。 业界社区 博客园 http://www.cnblogs.com/ stackoverflow http://stackoverflow.com/ segmentfault http://segmentfault.com/ 码农圈 https://coderq.com/ 前端乱炖 http://www.html-js.com/ 资讯&amp;综合 中文业界资讯 http://www.cnbeta.com/ InfoQ http://www.infoq.com/cn促进软件开发领域知识与创新的传播 互联网的一些事 http://www.yixieshi.com/ Startup News http://news.dbanotes.net/ 极客公园 http://www.geekpark.net/发现产品的价值 IT教育&amp;学习 看雪学院 http://www.pediy.com/关注安全技术领域 慕课网 http://www.imooc.com/course/list 网易公开课 http://open.163.com/ 网易云课堂 http://study.163.com/curricula/cs.htm"},{"title":"","date":"2017-12-30T06:59:31.831Z","updated":"2017-12-30T06:59:31.831Z","comments":false,"path":"categories/index.html","permalink":"http://www.yaosansi.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-12-30T06:59:18.546Z","updated":"2017-12-30T06:59:18.546Z","comments":false,"path":"tags/index.html","permalink":"http://www.yaosansi.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CentOS7上YUM安装MariaDB 10","slug":"install-mariadb-yum-on-centos","date":"2017-05-31T10:51:17.000Z","updated":"2017-12-30T16:16:59.972Z","comments":true,"path":"post/install-mariadb-yum-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/install-mariadb-yum-on-centos/","excerpt":"","text":"CentOS7上YUM安装MariaDB 10首先先要去mariadb网站获取下载信息，以便下一步编辑安装的配置文件： 找到你要装的版本 - 比如当前选择的是CentOS/64位/10.2https://downloads.mariadb.org/mariadb/repositories/#mirror=tuna&amp;distro=CentOS&amp;distro_release=centos7-amd64--centos7&amp;version=10.2 配置YUM安装源下面是 CentOS的自定义安装YUM源，粘贴复制这些到/etc/yum.repos.d/,建议命名MariaDB.repo 1234567# MariaDB 10.2 CentOS repository list - created 2017-12-26 14:20 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 因为官网的源下载安装非常慢，可以用以下源： 1234567# MariaDB 10.2 CentOS repository list - created 2017-07-03 06:59 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb] name = MariaDBbaseurl = https://mirrors.ustc.edu.cn/mariadb/yum/10.2/centos7-amd64gpgkey=https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDBgpgcheck=1 安装MariaDB更新完上述文件以后，使用以下命令安装 MariaDB: sudo yum install MariaDB-server MariaDB-client 安装完成其它步骤参考 CentOS7上YUM安装MySQL5.7","categories":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/categories/centos/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"yum","slug":"yum","permalink":"http://www.yaosansi.com/tags/yum/"},{"name":"mariadb","slug":"mariadb","permalink":"http://www.yaosansi.com/tags/mariadb/"}]},{"title":"CentOS7上YUM安装MySQL5.7","slug":"install-mysql-yum-on-centos","date":"2017-05-29T07:14:42.000Z","updated":"2017-12-30T16:18:24.062Z","comments":true,"path":"post/install-mysql-yum-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/install-mysql-yum-on-centos/","excerpt":"","text":"CentOS7上YUM安装MySQL5.71、配置YUM源在MySQL官网中下载YUM源rpm安装包：http://dev.mysql.com/downloads/repo/yum/ 找到以下源,并下载安装123Red Hat Enterprise Linux 7 / Oracle Linux 7 (Architecture Independent), RPM Package 25.1K Download(mysql57-community-release-el7-11.noarch.rpm) 下载MySQL源安装包 wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 安装MySQL源 yum localinstall mysql57-community-release-el7-11.noarch.rpm 2、安装MySQL yum install mysql-community-server 1234567891011121314151617======================================================================================== Package Arch Version Repository Size========================================================================================Installing: mysql-community-libs x86_64 5.7.20-1.el7 mysql57-community 2.1 M replacing mariadb-libs.x86_64 1:5.5.56-2.el7 mysql-community-libs-compat x86_64 5.7.20-1.el7 mysql57-community 2.0 M replacing mariadb-libs.x86_64 1:5.5.56-2.el7 mysql-community-server x86_64 5.7.20-1.el7 mysql57-community 164 MInstalling for dependencies: libaio x86_64 0.3.109-13.el7 base 24 k mysql-community-client x86_64 5.7.20-1.el7 mysql57-community 24 M mysql-community-common x86_64 5.7.20-1.el7 mysql57-community 272 kTransaction Summary========================================================================================Install 3 Packages (+3 Dependent packages) 3、启动MySQL服务 systemctl start mysqld 查看MySQL的启动状态 systemctl status mysqld 12345678910111213● mysqld.service - MySQL Server Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled) Active: active (running) since Tue 2017-12-26 21:35:32 CST; 51s ago Docs: man:mysqld(8) http://dev.mysql.com/doc/refman/en/using-systemd.html Process: 9907 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS) Process: 9833 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS) Main PID: 9910 (mysqld) CGroup: /system.slice/mysqld.service └─9910 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pidDec 26 21:35:26 ecs-mall systemd[1]: Starting MySQL Server...Dec 26 21:35:32 ecs-mall systemd[1]: Started MySQL Server. 4、开机启动 systemctl enable mysqld systemctl daemon-reload 5、修改root本地登录密码mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改： 找到密码： grep &#39;temporary password&#39; /var/log/mysqld.log 12grep &apos;temporary password&apos; /var/log/mysqld.log2017-12-26T13:35:28.432260Z 1 [Note] A temporary password is generated for root@localhost: lLeNXPJaR3=D 登录Mysql: mysql -uroot -p 输入上面找到的随机密码后，修改密码： mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!&#39;; 或者 mysql&gt; set password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;MyNewPass4!&#39;); 注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误 通过msyql环境变量可以查看密码策略的相关信息： mysql&gt; show variables like &#39;%password%&#39;; 12345678910111213141516171819+---------------------------------------+--------+| Variable_name | Value |+---------------------------------------+--------+| default_password_lifetime | 0 || disconnect_on_expired_password | ON || log_builtin_as_identified_by_password | OFF || mysql_native_password_proxy_users | OFF || old_passwords | 0 || report_password | || sha256_password_proxy_users | OFF || validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+---------------------------------------+--------+14 rows in set (0.00 sec) 123456validate_password_policy：密码策略，默认为MEDIUM策略 validate_password_dictionary_file：密码策略文件，策略为STRONG才需要 validate_password_length：密码最少长度 validate_password_mixed_case_count：大小写字符长度，至少1个 validate_password_number_count ：数字至少1个 validate_password_special_char_count：特殊字符至少1个 上述参数是默认策略MEDIUM的密码检查规则。 共有以下几种密码策略： 1234策略 检查规则0 or LOW Length1 or MEDIUM Length; numeric, lowercase/uppercase, and special characters2 or STRONG Length; numeric, lowercase/uppercase, and special characters; dictionary file MySQL官网密码策略详细说明：http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy 修改密码策略 123在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略# 选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件validate_password_policy=0 如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可： validate_password = off 重新启动mysql服务使配置生效： systemctl restart mysqld 6、添加远程登录用户默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接： 授权方式： 例如，你想root使用123456从任何主机连接到mysql服务器。 12mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;mysql&gt;FLUSH RIVILEGES 如果你想允许用户jack从ip为10.10.50.127的主机连接到mysql服务器，并使用654321作为密码: 12 mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;jack&apos;@’10.10.50.127’ IDENTIFIED BY &apos;654321&apos; WITH GRANT OPTION;mysql&gt;FLUSH RIVILEGES 或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户 1mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;yangxin&apos;@&apos;%&apos; IDENTIFIED BY &apos;Yangxin0917!&apos; WITH GRANT OPTION; 7、配置默认编码为utf8修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示： 123[mysqld]character_set_server=utf8init_connect=&apos;SET NAMES utf8&apos; 重新启动mysql服务，查看数据库默认编码如下所示：1234567891011121314mysql&gt; show variables like &apos;%character%&apos;;+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | latin1 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | latin1 || character_set_system | utf8 || character_sets_dir | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.00 sec) 默认配置文件路径配置文件：/etc/my.cnf日志文件：/var/log//var/log/mysqld.log服务启动脚本：/usr/lib/systemd/system/mysqld.servicesocket文件：/var/run/mysqld/mysqld.pid 参考:http://www.linuxidc.com/Linux/2016-09/135288.htm","categories":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/categories/centos/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"yum","slug":"yum","permalink":"http://www.yaosansi.com/tags/yum/"},{"name":"mysql","slug":"mysql","permalink":"http://www.yaosansi.com/tags/mysql/"}]},{"title":"CentOS7上使nginx支持PHP","slug":"nginx-php-config-on-centos","date":"2017-05-26T03:34:09.000Z","updated":"2018-01-02T14:18:25.083Z","comments":true,"path":"post/nginx-php-config-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/nginx-php-config-on-centos/","excerpt":"","text":"CentOS7上使nginx支持PHP测试代码123&lt;?php phpinfo();?&gt; Nginx访问PHP文件的File not found这个错误很常见，原有有下面两面几种 php-fpm找不到SCRIPT_FILENAME里执行的php文件 php-fpm不能访问所执行的php，也就是权限问题 第一种情况更改配置文件nginx.conf1fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; 替换成下面1fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; 然后重新加载nginx配置文件1/etc/init.d/nginx reload 第二种情况两种解决方法：第一种，就是把你root文件夹设为其他用户允许第二种，找到你的php-fpm的配置文件，找到下面这段，把apache替换成你要的用户组 1234; RPM: apache Choosed to be able to access some dir as httpd user = apache ; RPM: Keep a group allowed to write in log dir. group = apache 正确配置Nginx+PHP网上错误或是坏味道的配置123456789101112131415161718192021server &#123; listen 80; server_name foo.com; root /path; location / &#123; index index.html index.htm index.php; if (!-e $request_filename) &#123; rewrite . /index.php last; &#125; &#125; location ~ \\.php$ &#123; include fastcgi_params; fastcgi_param SCRIPT_FILENAME /path$fastcgi_script_name; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; &#125;&#125; 正确的配置-使用try_files123456789101112131415161718server &#123; listen 80; server_name foo.com; root /path; index index.html index.htm index.php; location / &#123; try_files $uri $uri/ /index.php$is_args$args; &#125; location ~ \\.php$ &#123; try_files $uri =404; include fastcgi.conf; fastcgi_pass 127.0.0.1:9000; &#125;&#125; fastcgi.conf12345678910111213141516171819202122232425fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param QUERY_STRING $query_string;fastcgi_param REQUEST_METHOD $request_method;fastcgi_param CONTENT_TYPE $content_type;fastcgi_param CONTENT_LENGTH $content_length;fastcgi_param SCRIPT_NAME $fastcgi_script_name;fastcgi_param REQUEST_URI $request_uri;fastcgi_param DOCUMENT_URI $document_uri;fastcgi_param DOCUMENT_ROOT $document_root;fastcgi_param SERVER_PROTOCOL $server_protocol;fastcgi_param REQUEST_SCHEME $scheme;fastcgi_param HTTPS $https if_not_empty;fastcgi_param GATEWAY_INTERFACE CGI/1.1;fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;fastcgi_param REMOTE_ADDR $remote_addr;fastcgi_param REMOTE_PORT $remote_port;fastcgi_param SERVER_ADDR $server_addr;fastcgi_param SERVER_PORT $server_port;fastcgi_param SERVER_NAME $server_name;# PHP only, required if PHP was built with --enable-force-cgi-redirectfastcgi_param REDIRECT_STATUS 200; 详见: https://huoding.com/2013/10/23/290","categories":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/categories/centos/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"nginx","slug":"nginx","permalink":"http://www.yaosansi.com/tags/nginx/"},{"name":"php","slug":"php","permalink":"http://www.yaosansi.com/tags/php/"}]},{"title":"CentOS7使用YUM安装PHP","slug":"install-php-yum-on-centos","date":"2017-05-25T11:18:17.000Z","updated":"2017-12-30T16:18:55.925Z","comments":true,"path":"post/install-php-yum-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/install-php-yum-on-centos/","excerpt":"","text":"CentOS7使用YUM安装PHP7安装或升级PHP版本，使用yum命令及webtatic库 卸载已安装PHP更新之前查看当前PHP版本避免重复更新 # php -v 检查当前PHP的安装包 # yum list installed | grep php 完全移除当前PHP安装包以免起冲突 # yum remove php* PHP 软件源默认的yum源无法升级PHP，需要添加第三方yum源，我们选择webtatic库 CentOs 5.x rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm CentOs 6.x rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm CentOs 7.X rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 小提示 如果安装错误：error: Failed dependencies:epel-release &gt;= 7 is needed by webtatic-release-7-3.noarch需要先安装epel-release。 安装epel-release通过命令： rpm -ivh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm 成功安装。 安装PHP7源终端再次运行如下命令： rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 安装 PHP查看yum源是否有php7.1安装包 yum list php71 安装php及相关插件安装php7.0 yum install -y php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64 php70w-fpm 其他版本php安装如果想安装php5.5或者5.6版本，将上面的php70w替换为php55w或者php56w就可以了。 安装php7.1 yum install -y php71w-fpm php71w-opcache php71w-cli php71w-gd php71w-imap php71w-mysqlnd php71w-mbstring php71w-mcrypt php71w-pdo php71w-pecl-apcu php71w-pecl-mongodb php71w-pecl-redis php71w-pgsql php71w-xml php71w-xmlrpc php71w-devel mod_php71w 查看当前php版本 php -v 开启php-fpm服务 systemctl start php-fpm.servicesystemctl enable php-fpm.service 更多资料 https://webtatic.com/packages/php71/","categories":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/categories/centos/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"yum","slug":"yum","permalink":"http://www.yaosansi.com/tags/yum/"},{"name":"php","slug":"php","permalink":"http://www.yaosansi.com/tags/php/"}]},{"title":"CentOS7使用YUM安装nginx","slug":"install-nginx-yum-on-centos","date":"2017-05-23T09:31:18.000Z","updated":"2017-12-30T16:19:01.230Z","comments":true,"path":"post/install-nginx-yum-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/install-nginx-yum-on-centos/","excerpt":"","text":"CentOS7使用YUM安装nginxcentos7系统库中默认是没有nginx的rpm包的，所以我们自己需要先更新下rpm依赖库 1. 使用yum安装nginx需要包括nginx的库，安装nginx的库 #rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 2.使用下面命令安装nginx #yum install nginx 3.启动nginx #systemctl start nginx.service#systemctl enable nginx.service nginx 无域名IP直接无法访问12345server&#123; listen 80 default_server; server_name _; return 444; &#125;","categories":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/categories/centos/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"yum","slug":"yum","permalink":"http://www.yaosansi.com/tags/yum/"},{"name":"nginx","slug":"nginx","permalink":"http://www.yaosansi.com/tags/nginx/"}]},{"title":"CentOS7挂载硬盘","slug":"mount-disk-on-centos","date":"2017-05-20T01:12:05.000Z","updated":"2018-01-02T04:10:47.025Z","comments":true,"path":"post/mount-disk-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/mount-disk-on-centos/","excerpt":"","text":"挂载硬盘 本文仅适用于使用 fdisk 命令对一个不大于 2 TB 的数据盘执行分区操作。如果需要分区的数据盘大于 2 TB，请参考 阿里云-32TB 块存储分区。 查看新磁盘查看硬盘 df -h 12345678[root@sfdsfsdf ]# df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 99G 18G 77G 19% /devtmpfs 3.9G 0 3.9G 0% /devtmpfs 3.9G 0 3.9G 0% /dev/shmtmpfs 3.9G 644K 3.9G 1% /runtmpfs 3.9G 0 3.9G 0% /sys/fs/cgrouptmpfs 783M 0 783M 0% /run/user/0 1. 查找未挂载的硬盘 [root@cgsl ]# fdisk –l 123456789101112131415161718Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x0008d73a Device Boot Start End Blocks Id System/dev/vda1 * 2048 83884031 41940992 83 LinuxDisk /dev/vdb: 107.4 GB, 107374182400 bytes, 209715200 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes# 注意看这里：这个就是新的硬盘# 记下/dev/vdb 这个名称# 注意阿里云不同的硬盘可能名称不同，如,高效盘:vdb开头 SSD:xvdb 找到新添加的磁盘的编号为/dev/vdb 注： 如果您的数据盘显示的是 dev/xvd?，表示您使用的是非 I/O 优化实例。 其中 ? 是 a−z 的任一个字母。 2. 创建硬盘分区 使用 fdisk /dev/vdb 123456789$ fdisk /dev/vdbWelcome to fdisk (util-linux 2.23.2).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.Device does not contain a recognized partition tableBuilding a new DOS disklabel with disk identifier 0x774b38c4. 输入nCommand (m for help):n 1234Partition type: p primary (0 primary, 0 extended, 4 free) e extendedSelect (default p): 输入p 1Partition number (1-4): 1 回车 1First sector (2048-209715199, default 2048): 回车 12Using default value 2048Last sector, +sectors or +size&#123;K,M,G&#125; (2048-209715199, default 209715199): 回车 12Using default value 209715199Partition 1 of type Linux and of size 100 GiB is set 输入wCommand (m for help): w 1234The partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks. 3. 格式化分区 # mkfs.ext4 /dev/vdb 123456789101112131415161718192021mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks6553600 inodes, 26214400 blocks1310720 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=2174746624800 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000, 7962624, 11239424, 20480000, 23887872Allocating group tables: done Writing inode tables: done Creating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done 4. 建立挂载目录 # mkdir /data 5. 挂载分区 # mount /dev/vdb /data 6. 设置开机自动挂载运行命令 echo /dev/vdb1 /data ext4 defaults 0 0 &gt;&gt; /etc/fstab 或手动编辑 fstab: vi /etc/fstab 123456789# # /etc/fstab # Created by anaconda on Tue May 3 13:48:10 2016 # # Accessible filesystems, by reference, are maintained under &apos;/dev/disk&apos; # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info # UUID=80b9b662-0a1d-4e84-b07b-c1bf19e72d97 / ext4 defaults 1 1 /dev/vdb1 /data ext4 defaults 0 0 /dev/vdb /data ext4 defaults 0 0 7. 确认是否挂载成功重启服务器 # reboot 查看硬盘分区 12# df/dev/vdb 20635700 176196 19411268 1% /data 参考 阿里云-Linux 格式化和挂载数据盘","categories":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/categories/centos/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"mount","slug":"mount","permalink":"http://www.yaosansi.com/tags/mount/"},{"name":"disk","slug":"disk","permalink":"http://www.yaosansi.com/tags/disk/"}]},{"title":"CentOS7更改SSH端口","slug":"change-ssh-port-on-centos","date":"2017-05-15T05:41:20.000Z","updated":"2017-12-30T16:19:23.674Z","comments":true,"path":"post/change-ssh-port-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/change-ssh-port-on-centos/","excerpt":"","text":"更改SSH端口step1 修改/etc/ssh/sshd_config vi /etc/ssh/sshd_config #Port 22 //这行去掉#号，防止配置不好以后不能远程登录，还得去机房修改，等修改以后的端口能使用以后在注释掉 Port 20000 //下面添加这一行 step2 修改firewall配置firewall添加想要修改的ssh端口： firewall-cmd –zone=public –add-port=20000/tcp –permanent (permanent是保存配置，不然下次重启以后这次修改无效) reload firewall: firewall-cmd –reload 查看添加端口是否成功，如果添加成功则会显示yes，否则no firewall-cmd –zone=public –query-port=20000/tcp step3 修改SELinux使用以下命令查看当前SElinux 允许的ssh端口： semanage port -l | grep ssh 添加20000端口到 SELinux semanage port -a -t ssh_port_t -p tcp 20000 然后确认一下是否添加进去 semanage port -l | grep ssh 如果成功会输出 ssh_port_t tcp 20000, 22 step4 重启ssh systemctl restart sshd.service step5 测试新端口的ssh连接测试修改端口以后的ssh连接，如果成功则将step1里面的port 22 重新注释掉","categories":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/categories/centos/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://www.yaosansi.com/tags/ssh/"},{"name":"port","slug":"port","permalink":"http://www.yaosansi.com/tags/port/"},{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"}]},{"title":"GIT log 中文乱码","slug":"git-log-chinese-garbled","date":"2017-05-12T04:41:50.000Z","updated":"2017-12-30T16:19:55.359Z","comments":true,"path":"post/git-log-chinese-garbled/","link":"","permalink":"http://www.yaosansi.com/post/git-log-chinese-garbled/","excerpt":"","text":"git log的中文乱码问题系统软件版本： win10 1709 Git-2.15.1.2-64-bit 解决方案：把Git控制台的默认输出改为gbk编码 打开git bush，运行1git config --global i18n.logoutputencoding utf-8 参考:http://www.pstips.net/question/5566.html","categories":[{"name":"soft","slug":"soft","permalink":"http://www.yaosansi.com/categories/soft/"}],"tags":[{"name":"git","slug":"git","permalink":"http://www.yaosansi.com/tags/git/"},{"name":"乱码","slug":"乱码","permalink":"http://www.yaosansi.com/tags/乱码/"},{"name":"log","slug":"log","permalink":"http://www.yaosansi.com/tags/log/"}]},{"title":"使用FFmpeg将字幕文件集成到视频文件","slug":"ffmpeg-burn-subtitles-into-video","date":"2015-06-04T04:22:00.000Z","updated":"2017-12-30T15:57:29.662Z","comments":true,"path":"post/ffmpeg-burn-subtitles-into-video/","link":"","permalink":"http://www.yaosansi.com/post/ffmpeg-burn-subtitles-into-video/","excerpt":"本文最后更新于：2015-05-25 13:12:00原文：http://www.yaosansi.com/post/ffmpeg-burn-subtitles-into-video 向视频文件里添加字幕是件很常见的事，本文使用FFmpeg将字幕文件集成到视频文件里。 在CentOS上编译安装FFmpeg","text":"本文最后更新于：2015-05-25 13:12:00原文：http://www.yaosansi.com/post/ffmpeg-burn-subtitles-into-video 向视频文件里添加字幕是件很常见的事，本文使用FFmpeg将字幕文件集成到视频文件里。 在CentOS上编译安装FFmpeg 字幕文件转换字幕文件有很多种，常见的有 .srt , .ass 文件等,下面使用FFmpeg进行相互转换。 将.srt文件转换成.ass文件 1ffmpeg -i subtitle.srt subtitle.ass 将.ass文件转换成.srt文件 1ffmpeg -i subtitle.ass subtitle.srt 集成字幕，选择播放这种字幕集成比较简单，播放时需要在播放器中选择相应的字幕文件。 1ffmpeg -i input.mp4 -i subtitles.srt -c:s mov_text -c:v copy -c:a copy output.mp4 嵌入SRT字幕到视频文件单独SRT字幕字幕文件为subtitle.srt 1ffmpeg -i video.avi -vf subtitles=subtitle.srt out.avi 嵌入在MKV等容器的字幕将video.mkv中的字幕（默认）嵌入到out.avi文件 1ffmpeg -i video.mkv -vf subtitles=video.mkv out.avi 将video.mkv中的字幕（第二个）嵌入到out.avi文件 1ffmpeg -i video.mkv -vf subtitles=video.mkv:si=1 out.avi 嵌入ASS字幕到视频文件1ffmpeg -i video.avi -vf &quot;ass=subtitle.ass&quot; out.avi 不能加载fontconfig文件1234Fontconfig error: Cannot load default config file[Parsed_ass_0 @ 0000000002bfa3e0] No usable fontconfig configuration file found, using fallback.Fontconfig error: Cannot load default config file 出现类似错误的原因是无法加载字体配置文件。 环境变量FFmpeg使用的默认字体文件是使用系统环境变量中对应的文件位置。 默认文件名：fonts.conf 环境变量 FONTCONFIG_FILE 可以覆盖默认配置文件环境变量 FONTCONFIG_PATH 可以覆盖默认配置文件目录 Linux 默认配置文件：fonts.conf 使用步骤： 以root权限登录 建立/etc/fonts目录 下载fonts.conf文件到/etc/fonts目录 设置fonts.conf文件权限为可读 Linux/Mac 系统在~/.bashrc 最后添加： 1export FONTCONFIG_PATH=/opt/X11/lib/X11/fontconfig 使之有效： 1source ~/.bashrc 编辑 /opt/X11/lib/X11/fontconfig/fonts.conf 在字体目录添加 /Library/Fonts 123456&lt;!-- Font directory list --&gt; &lt;dir&gt;/opt/X11/share/fonts&lt;/dir&gt; &lt;dir&gt;/usr/X11R6/lib/X11/fonts&lt;/dir&gt; &lt;dir&gt;~/.fonts&lt;/dir&gt; &lt;dir&gt;/Library/Fonts&lt;/dir&gt; Windows系统在系统环境变量中添加： name: FONTCONFIG_PATHvalue: J:/ffmpeg (我本机ffmpeg目录，与fonts.conf同目录即可) 将fonts.conf文件放至上述指定目录。 以下为yaosansi使用的fonts.conf文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&gt;&lt;!-- /etc/fonts/fonts.conf file to configure system font access --&gt;&lt;fontconfig&gt;&lt;!-- DO NOT EDIT THIS FILE. IT WILL BE REPLACED WHEN FONTCONFIG IS UPDATED. LOCAL CHANGES BELONG IN &apos;local.conf&apos;. The intent of this standard configuration file is to be adequate for most environments. If you have a reasonably normal environment and have found problems with this configuration, they are probably things that others will also want fixed. Please submit any problems to the fontconfig bugzilla system located at fontconfig.org Note that the normal &apos;make install&apos; procedure for fontconfig is to replace any existing fonts.conf file with the new version. Place any local customizations in local.conf which this file references. Keith Packard--&gt;&lt;!-- Font directory list --&gt; &lt;dir&gt;C:/Windows/Fonts&lt;/dir&gt;&lt;!-- Accept deprecated &apos;mono&apos; alias, replacing it with &apos;monospace&apos;--&gt; &lt;match target=&quot;pattern&quot;&gt; &lt;test qual=&quot;any&quot; name=&quot;family&quot;&gt; &lt;string&gt;mono&lt;/string&gt; &lt;/test&gt; &lt;edit name=&quot;family&quot; mode=&quot;assign&quot;&gt; &lt;string&gt;monospace&lt;/string&gt; &lt;/edit&gt; &lt;/match&gt;&lt;!-- Accept alternate &apos;sans serif&apos; spelling, replacing it with &apos;sans-serif&apos;--&gt; &lt;match target=&quot;pattern&quot;&gt; &lt;test qual=&quot;any&quot; name=&quot;family&quot;&gt; &lt;string&gt;sans serif&lt;/string&gt; &lt;/test&gt; &lt;edit name=&quot;family&quot; mode=&quot;assign&quot;&gt; &lt;string&gt;sans-serif&lt;/string&gt; &lt;/edit&gt; &lt;/match&gt;&lt;!-- Accept deprecated &apos;sans&apos; alias, replacing it with &apos;sans-serif&apos;--&gt; &lt;match target=&quot;pattern&quot;&gt; &lt;test qual=&quot;any&quot; name=&quot;family&quot;&gt; &lt;string&gt;sans&lt;/string&gt; &lt;/test&gt; &lt;edit name=&quot;family&quot; mode=&quot;assign&quot;&gt; &lt;string&gt;sans-serif&lt;/string&gt; &lt;/edit&gt; &lt;/match&gt;&lt;!-- Mark common families with their generics so we&apos;ll get something reasonable--&gt;&lt;!-- Serif faces --&gt; &lt;alias&gt; &lt;family&gt;Times New Roman&lt;/family&gt; &lt;default&gt;&lt;family&gt;serif&lt;/family&gt;&lt;/default&gt; &lt;/alias&gt;&lt;!-- If the font still has no generic name, add sans-serif --&gt; &lt;match target=&quot;pattern&quot;&gt; &lt;test qual=&quot;all&quot; name=&quot;family&quot; compare=&quot;not_eq&quot;&gt; &lt;string&gt;sans-serif&lt;/string&gt; &lt;/test&gt; &lt;test qual=&quot;all&quot; name=&quot;family&quot; compare=&quot;not_eq&quot;&gt; &lt;string&gt;serif&lt;/string&gt; &lt;/test&gt; &lt;test qual=&quot;all&quot; name=&quot;family&quot; compare=&quot;not_eq&quot;&gt; &lt;string&gt;monospace&lt;/string&gt; &lt;/test&gt; &lt;edit name=&quot;family&quot; mode=&quot;append_last&quot;&gt; &lt;string&gt;sans-serif&lt;/string&gt; &lt;/edit&gt; &lt;/match&gt;&lt;!-- AMT provides metric and shape compatible fonts for these three web font families. --&gt; &lt;alias&gt; &lt;family&gt;Times New Roman&lt;/family&gt; &lt;accept&gt;&lt;family&gt;Thorndale AMT&lt;/family&gt;&lt;/accept&gt; &lt;/alias&gt; &lt;alias&gt; &lt;family&gt;Arial&lt;/family&gt; &lt;accept&gt;&lt;family&gt;Albany AMT&lt;/family&gt;&lt;/accept&gt; &lt;/alias&gt; &lt;alias&gt; &lt;family&gt;Courier New&lt;/family&gt; &lt;accept&gt;&lt;family&gt;Cumberland AMT&lt;/family&gt;&lt;/accept&gt; &lt;/alias&gt; &lt;!-- Some Asian fonts misadvertise themselves as monospaced when in fact they are dual-spaced (half and full). This makes FreeType very confused as it forces all widths to match. Undo this magic by disabling the width forcing code --&gt; &lt;match target=&quot;font&quot;&gt; &lt;test name=&quot;family&quot;&gt;&lt;string&gt;GulimChe&lt;/string&gt;&lt;/test&gt; &lt;edit name=&quot;globaladvance&quot;&gt;&lt;bool&gt;false&lt;/bool&gt;&lt;/edit&gt; &lt;/match&gt; &lt;match target=&quot;font&quot;&gt; &lt;test name=&quot;family&quot;&gt;&lt;string&gt;DotumChe&lt;/string&gt;&lt;/test&gt; &lt;edit name=&quot;globaladvance&quot;&gt;&lt;bool&gt;false&lt;/bool&gt;&lt;/edit&gt; &lt;/match&gt; &lt;match target=&quot;font&quot;&gt; &lt;test name=&quot;family&quot;&gt;&lt;string&gt;BatangChe&lt;/string&gt;&lt;/test&gt; &lt;edit name=&quot;globaladvance&quot;&gt;&lt;bool&gt;false&lt;/bool&gt;&lt;/edit&gt; &lt;/match&gt; &lt;match target=&quot;font&quot;&gt; &lt;test name=&quot;family&quot;&gt;&lt;string&gt;GungsuhChe&lt;/string&gt;&lt;/test&gt; &lt;edit name=&quot;globaladvance&quot;&gt;&lt;bool&gt;false&lt;/bool&gt;&lt;/edit&gt; &lt;/match&gt; &lt;config&gt;&lt;!-- These are the default Unicode chars that are expected to be blank in fonts. All other blank chars are assumed to be broken and won&apos;t appear in the resulting charsets --&gt; &lt;blank&gt; &lt;int&gt;0x0020&lt;/int&gt; &lt;!-- SPACE --&gt; &lt;int&gt;0x00A0&lt;/int&gt; &lt;!-- NO-BREAK SPACE --&gt; &lt;int&gt;0x00AD&lt;/int&gt; &lt;!-- SOFT HYPHEN --&gt; &lt;int&gt;0x034F&lt;/int&gt; &lt;!-- COMBINING GRAPHEME JOINER --&gt; &lt;int&gt;0x0600&lt;/int&gt; &lt;!-- ARABIC NUMBER SIGN --&gt; &lt;int&gt;0x0601&lt;/int&gt; &lt;!-- ARABIC SIGN SANAH --&gt; &lt;int&gt;0x0602&lt;/int&gt; &lt;!-- ARABIC FOOTNOTE MARKER --&gt; &lt;int&gt;0x0603&lt;/int&gt; &lt;!-- ARABIC SIGN SAFHA --&gt; &lt;int&gt;0x06DD&lt;/int&gt; &lt;!-- ARABIC END OF AYAH --&gt; &lt;int&gt;0x070F&lt;/int&gt; &lt;!-- SYRIAC ABBREVIATION MARK --&gt; &lt;int&gt;0x115F&lt;/int&gt; &lt;!-- HANGUL CHOSEONG FILLER --&gt; &lt;int&gt;0x1160&lt;/int&gt; &lt;!-- HANGUL JUNGSEONG FILLER --&gt; &lt;int&gt;0x1680&lt;/int&gt; &lt;!-- OGHAM SPACE MARK --&gt; &lt;int&gt;0x17B4&lt;/int&gt; &lt;!-- KHMER VOWEL INHERENT AQ --&gt; &lt;int&gt;0x17B5&lt;/int&gt; &lt;!-- KHMER VOWEL INHERENT AA --&gt; &lt;int&gt;0x180E&lt;/int&gt; &lt;!-- MONGOLIAN VOWEL SEPARATOR --&gt; &lt;int&gt;0x2000&lt;/int&gt; &lt;!-- EN QUAD --&gt; &lt;int&gt;0x2001&lt;/int&gt; &lt;!-- EM QUAD --&gt; &lt;int&gt;0x2002&lt;/int&gt; &lt;!-- EN SPACE --&gt; &lt;int&gt;0x2003&lt;/int&gt; &lt;!-- EM SPACE --&gt; &lt;int&gt;0x2004&lt;/int&gt; &lt;!-- THREE-PER-EM SPACE --&gt; &lt;int&gt;0x2005&lt;/int&gt; &lt;!-- FOUR-PER-EM SPACE --&gt; &lt;int&gt;0x2006&lt;/int&gt; &lt;!-- SIX-PER-EM SPACE --&gt; &lt;int&gt;0x2007&lt;/int&gt; &lt;!-- FIGURE SPACE --&gt; &lt;int&gt;0x2008&lt;/int&gt; &lt;!-- PUNCTUATION SPACE --&gt; &lt;int&gt;0x2009&lt;/int&gt; &lt;!-- THIN SPACE --&gt; &lt;int&gt;0x200A&lt;/int&gt; &lt;!-- HAIR SPACE --&gt; &lt;int&gt;0x200B&lt;/int&gt; &lt;!-- ZERO WIDTH SPACE --&gt; &lt;int&gt;0x200C&lt;/int&gt; &lt;!-- ZERO WIDTH NON-JOINER --&gt; &lt;int&gt;0x200D&lt;/int&gt; &lt;!-- ZERO WIDTH JOINER --&gt; &lt;int&gt;0x200E&lt;/int&gt; &lt;!-- LEFT-TO-RIGHT MARK --&gt; &lt;int&gt;0x200F&lt;/int&gt; &lt;!-- RIGHT-TO-LEFT MARK --&gt; &lt;int&gt;0x2028&lt;/int&gt; &lt;!-- LINE SEPARATOR --&gt; &lt;int&gt;0x2029&lt;/int&gt; &lt;!-- PARAGRAPH SEPARATOR --&gt; &lt;int&gt;0x202A&lt;/int&gt; &lt;!-- LEFT-TO-RIGHT EMBEDDING --&gt; &lt;int&gt;0x202B&lt;/int&gt; &lt;!-- RIGHT-TO-LEFT EMBEDDING --&gt; &lt;int&gt;0x202C&lt;/int&gt; &lt;!-- POP DIRECTIONAL FORMATTING --&gt; &lt;int&gt;0x202D&lt;/int&gt; &lt;!-- LEFT-TO-RIGHT OVERRIDE --&gt; &lt;int&gt;0x202E&lt;/int&gt; &lt;!-- RIGHT-TO-LEFT OVERRIDE --&gt; &lt;int&gt;0x202F&lt;/int&gt; &lt;!-- NARROW NO-BREAK SPACE --&gt; &lt;int&gt;0x205F&lt;/int&gt; &lt;!-- MEDIUM MATHEMATICAL SPACE --&gt; &lt;int&gt;0x2060&lt;/int&gt; &lt;!-- WORD JOINER --&gt; &lt;int&gt;0x2061&lt;/int&gt; &lt;!-- FUNCTION APPLICATION --&gt; &lt;int&gt;0x2062&lt;/int&gt; &lt;!-- INVISIBLE TIMES --&gt; &lt;int&gt;0x2063&lt;/int&gt; &lt;!-- INVISIBLE SEPARATOR --&gt; &lt;int&gt;0x206A&lt;/int&gt; &lt;!-- INHIBIT SYMMETRIC SWAPPING --&gt; &lt;int&gt;0x206B&lt;/int&gt; &lt;!-- ACTIVATE SYMMETRIC SWAPPING --&gt; &lt;int&gt;0x206C&lt;/int&gt; &lt;!-- INHIBIT ARABIC FORM SHAPING --&gt; &lt;int&gt;0x206D&lt;/int&gt; &lt;!-- ACTIVATE ARABIC FORM SHAPING --&gt; &lt;int&gt;0x206E&lt;/int&gt; &lt;!-- NATIONAL DIGIT SHAPES --&gt; &lt;int&gt;0x206F&lt;/int&gt; &lt;!-- NOMINAL DIGIT SHAPES --&gt; &lt;int&gt;0x3000&lt;/int&gt; &lt;!-- IDEOGRAPHIC SPACE --&gt; &lt;int&gt;0x3164&lt;/int&gt; &lt;!-- HANGUL FILLER --&gt; &lt;int&gt;0xFEFF&lt;/int&gt; &lt;!-- ZERO WIDTH NO-BREAK SPACE --&gt; &lt;int&gt;0xFFA0&lt;/int&gt; &lt;!-- HALFWIDTH HANGUL FILLER --&gt; &lt;int&gt;0xFFF9&lt;/int&gt; &lt;!-- INTERLINEAR ANNOTATION ANCHOR --&gt; &lt;int&gt;0xFFFA&lt;/int&gt; &lt;!-- INTERLINEAR ANNOTATION SEPARATOR --&gt; &lt;int&gt;0xFFFB&lt;/int&gt; &lt;!-- INTERLINEAR ANNOTATION TERMINATOR --&gt; &lt;/blank&gt;&lt;!-- Rescan configuration every 30 seconds when FcFontSetList is called --&gt; &lt;rescan&gt; &lt;int&gt;30&lt;/int&gt; &lt;/rescan&gt; &lt;/config&gt;&lt;/fontconfig&gt;\u0002 参考 http://www.ffmpeg.org/ https://trac.ffmpeg.org/wiki/HowToBurnSubtitlesIntoVideo http://ffmpeg.org/ffmpeg-all.html#toc-subtitles-1 http://en.wikipedia.org/wiki/SubStation_Alpha#Advanced_SubStation_Alpha http://ffmpeg.org/ffmpeg-filters.html#ass http://www.stata.com/support/faqs/unix/fontconfig-error/ http://freedesktop.org/software/fontconfig/fontconfig-user.html http://www.freedesktop.org/wiki/Software/fontconfig/ http://www.stata.com/support/faqs/unix/fonts.conf/lux64/fonts.conf http://blog.neten.de/posts/2013/10/06/use-ffmpeg-to-burn-subtitles-into-the-video/","categories":[{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/categories/video/"}],"tags":[{"name":"ffmepg","slug":"ffmepg","permalink":"http://www.yaosansi.com/tags/ffmepg/"},{"name":"windows","slug":"windows","permalink":"http://www.yaosansi.com/tags/windows/"}]},{"title":"在CentOS上编译安装FFmpeg","slug":"ffmpeg-on-centos","date":"2015-05-22T07:22:00.000Z","updated":"2017-12-30T15:57:40.321Z","comments":true,"path":"post/ffmpeg-on-centos/","link":"","permalink":"http://www.yaosansi.com/post/ffmpeg-on-centos/","excerpt":"本文最后更新于：2015-05-25 13:12:00原文：http://www.yaosansi.com/post/ffmpeg-on-centos 在CentOS编译安装ffmpeg比较麻烦，以前也搞过多次，由于博客调整，特重新记录一下，以备不时之需。","text":"本文最后更新于：2015-05-25 13:12:00原文：http://www.yaosansi.com/post/ffmpeg-on-centos 在CentOS编译安装ffmpeg比较麻烦，以前也搞过多次，由于博客调整，特重新记录一下，以备不时之需。 使用yum安装ffmpeg和相关软件快速安装 ffmpeg直接安装： 1yum install ffmpeg ffmpeg-devel 若没有找到相应包，需要先加入要应的包。 将下列代码命名为 dag.repo 放在 /etc/yum.repos.d 目录 下。 12345[dag]name=Dag RPM Repository for Red Hat Enterprise Linuxbaseurl=http://apt.sw.be/redhat/el$releasever/en/$basearch/daggpgcheck=1enabled=1 然后再执行上方的安装命令。 安装 ffmpeg-php 扩展123456wget /path/to/this/file/ffmpeg-php-0.5.2.1.tbz2tar -xjf ffmpeg-0.5.2.1.tbz2phpize./configuremakemake install 修改 php.ini 文件安装完成后，将会在/usr/local/lib/php/extensions/no-debug-non-zts-20060613/ffmpeg.so 看到php扩展文件。 打开php.ini文件,加入下面两行 12[ffmpeg]extension=ffmpeg.so 重启WEB服务器。使用phpinfo即可看到ffmpeg相关信息。 1234567// #test.php&lt;?phpphpinfo()?&gt; php 使用方法12345678910&lt;?php$extension = &quot;ffmpeg&quot;;$extension_soname = $extension . &quot;.&quot; . PHP_SHLIB_SUFFIX;$extension_fullname = PHP_EXTENSION_DIR . &quot;/&quot; . $extension_soname;// load extensionif(!extension_loaded($extension)) &#123; dl($extension_soname) or die(&quot;Can&apos;t load extension $extension_fullname\\n&quot;);&#125;?&gt; 安装 Mplayer 和 Mencoder1yum install mplayer mencoder 常见问题常见问题及解决方案请参考这里：http://www.mysql-apache-php.com/ffmpeg-install.htm 自行编译安装 ffmpeg安装依赖项1yum install autoconf automake gcc gcc-c++ git libtool make nasm pkgconfig zlib-devel 安装相应软件包可以建立目录存放软件包 1mkdir ~/ffmpeg_sources 注意：以下软件包请有选择的安装，如果不需要请在./configure时移除或关闭相关选项 安装 yasmYasm是一个完全重写的NASM汇编。目前，它支持x86和AMD64指令集。 x264 和 FFmpeg都使用Yasm. 12345678cd ~/ffmpeg_sourcesgit clone --depth 1 git://github.com/yasm/yasm.gitcd yasmautoreconf -fiv./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot;makemake installmake distclean 或12345678wget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gztar zxf yasm-1.3.0.tar.gzcd yasm-1.3.0./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot;makemake installmake distclean. ~/.bash_profile 安装 x264H.264 编码器。http://trac.ffmpeg.org/wiki/Encode/H.2641234567cd ~/ffmpeg_sourcesgit clone --depth 1 git://git.videolan.org/x264cd x264./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot; --enable-staticmakemake installmake distclean 或1234567wget ftp://ftp.videolan.org/pub/x264/snapshots/last_x264.tar.bz2tar jxf last_x264.tar.bz2cd x264-snapshot-20130311-2245/./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot; --enable-sharedmakemake installmake distclean 需要ffmpeg配置./configure --enable-gpl --enable-libx264 注：由于libx264的code有GPL信息，所以，支持libx264时，需要–enable-gpl，ffmpeg在license方面还是比我们国内的人更重视 安装 x265H.265/HEVC编码器.http://trac.ffmpeg.org/wiki/Encode/H.265123456cd ~/ffmpeg_sourceshg clone https://bitbucket.org/multicoreware/x265cd ~/ffmpeg_sources/x265/build/linuxcmake -G &quot;Unix Makefiles&quot; -DCMAKE_INSTALL_PREFIX=&quot;$HOME/ffmpeg_build&quot; -DENABLE_SHARED:bool=off ../../sourcemakemake install 需要ffmpeg配置./configure --enable-gpl --enable-libx265 安装 libfdk_aacAAC音频编码器，Fraunhofer AAC library12345678cd ~/ffmpeg_sourcesgit clone --depth 1 git://git.code.sf.net/p/opencore-amr/fdk-aaccd fdk-aacautoreconf -fiv./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --enable-sharedmakemake installmake distclean 需要ffmpeg配置--enable-libfdk_aac ，如果指定了--enable-gpl还要配置--enable-nonfree 安装 libmp3lameMp3音频编码器1234567wget http://iweb.dl.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gztar zxf lame-3.99.5.tar.gzcd lame-3.99.5./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot; --enable-shared --enable-nasmmakemake installmake distclean 需要ffmpeg配置--enable-libmp3lame 安装 libopusOpus 音频编解码器12345678cd ~/ffmpeg_sourcesgit clone git://git.opus-codec.org/opus.gitcd opusautoreconf -fiv./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --disable-sharedmakemake installmake distclean 或1234567wget http://downloads.xiph.org/releases/opus/opus-1.0.3.tar.gztar zxf opus-1.0.3.tar.gzcd opus-1.0.3./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --enable-sharedmakemake installmake distclean 需要ffmpeg配置--enable-libopus 安装 libogg库libogg是Ogg流库，libtheora、libvorbis需要libogg库，speex需要它。12345678cd ~/ffmpeg_sourcescurl -O http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.gztar xzvf libogg-1.3.2.tar.gzcd libogg-1.3.2./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --disable-sharedmakemake installmake distclean 安装 libvorbis库Vorbis音频编码器，需要libogg库。http://trac.ffmpeg.org/wiki/CompilationGuide/Centos#libogg12345678cd ~/ffmpeg_sourcescurl -O http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.4.tar.gztar xzvf libvorbis-1.3.4.tar.gzcd libvorbis-1.3.4LDFLAGS=&quot;-L$HOME/ffmeg_build/lib&quot; CPPFLAGS=&quot;-I$HOME/ffmpeg_build/include&quot; ./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --with-ogg=&quot;$HOME/ffmpeg_build&quot; --disable-sharedmakemake installmake distclean 需要ffmpeg配置--enable-libvorbis 安装 libvpxVP8/VP9视频编码器 1234567cd ~/ffmpeg_sourcesgit clone --depth 1 http://git.chromium.org/webm/libvpx.gitcd libvpx./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --enable-examplesmakemake installmake clean 需要ffmpeg配置--enable-libvpx 编译安装 ffmpeg12345678cd ~/ffmpeg_sourcesgit clone --depth 1 git://source.ffmpeg.org/ffmpegcd ffmpegPKG_CONFIG_PATH=&quot;$HOME/ffmpeg_build/lib/pkgconfig&quot; ./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --extra-cflags=&quot;-I$HOME/ffmpeg_build/include&quot; --extra-ldflags=&quot;-L$HOME/ffmpeg_build/lib&quot; --bindir=&quot;$HOME/bin&quot; --pkg-config-flags=&quot;--static&quot; --enable-gpl --enable-nonfree --enable-libfdk_aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265makemake installmake distcleanhash -r 注： 编译完成后ffmpeg,ffprobe,ffserver,lame,x264都可以使用。 编译安装时可以参考Windows Build：http://ffmpeg.zeranoe.com/builds/ 如果还需要持续更新请保留ffmpeg_sources目录。 ##其它可选软件包 安装 OpenCORE AMR12345wget http://iweb.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.3.tar.gztar zxf opencore-amr-0.1.3.tar.gz./configure --prefix=&quot;$HOME/ffmpeg_build&quot; –enable-sharedmakemake install 需要ffmpeg配置--enable-libopencore-amrnb 和/或 --enable-libopencore-amrwb 安装 VisualOn AAC注：github的tag和master版均无法autoconf，用zeranoe版代替 1234567wget wget http://ffmpeg.zeranoe.com/builds/source/external_libraries/vo-aacenc-0.1.3.tar.xzxz -d vo-aacenc-0.1.3.tar.xztar xf vo-aacenc-0.1.3.tarcd vo-aacenc-0.1.3./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install 也可1wget http://iweb.dl.sourceforge.net/project/opencore-amr/vo-aacenc/vo-aacenc-0.1.3.tar.gz 需要ffmpeg配置--enable-libvo-aacenc 安装 VisualOn AMR-WB注：github的tag和master版均无法autoconf，用zeranoe版代替 12345wget http://ffmpeg.zeranoe.com/builds/source/external_libraries/vo-amrwbenc-0.1.2.tar.xzxz -d vo-amrwbenc-0.1.2.tar.xztar xf vo-amrwbenc-0.1.2.tarcd vo-amrwbenc-0.1.2./configure --prefix=&quot;$HOME/ffmpeg_build&quot; 需要ffmpeg配置--enable-libvo-amrwbenc 安装 frei0r先安装新版autoconf，这会覆盖掉系统中的旧版本哦123456wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gztar zxf autoconf-2.69.tar.gzcd autoconf-2.69./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install 123456wget http://files.dyne.org/frei0r/releases/frei0r-plugins-1.4.tar.gztar zxf frei0r-plugins-1.4.tar.gzcd frei0r-plugins-1.4./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install 安装 gnutls 注意：/etc/ld.so.conf要加上lib64。并且不要使用yum remove gnutls gnutls-devel 首先安装nettle：123456wget http://www.lysator.liu.se/~nisse/archive/nettle-2.5.tar.gztar zxf nettle-2.5.tar.gzcd nettle-2.5./configure --prefix=&quot;$HOME/ffmpeg_build&quot; –enable-sharedmakemake install 然后安装gnutls新版： 1234567wget ftp://ftp.gnutls.org/gcrypt/gnutls/v3.1/gnutls-3.1.9.1.tar.xzxz -d gnutls-3.1.9.1.tar.xztar xf gnutls-3.1.9.1.tarcd gnutls-3.1.9.1PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig ./configure –enable-sharedmakemake install 安装 rtmpdump12345wget http://rtmpdump.mplayerhq.hu/download/rtmpdump-2.3.tgztar zxf rtmpdump-2.3.tgzcd rtmpdump-2.3makemake install 安装 schroedinger注：先安装好orc库 1234567wget http://code.entropywave.com/download/orc/orc-0.4.17.tar.gztar zxf orc-0.4.17.tar.gzcd orc-0.4.17./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install/sbin/ldconfig 123456wget http://diracvideo.org/download/schroedinger/schroedinger-1.0.11.tar.gztar zxf schroedinger-1.0.11.tar.gzcd schroedinger-1.0.11PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig ./configuremakemake install 安装 soxr注：新版libsoxr貌似与当前ffmpeg不兼容，用旧版12345678910yum install -y xzwget http://hivelocity.dl.sourceforge.net/project/soxr/soxr-0.1.0-Source.tar.xzxz -d soxr-0.1.0-Source.tar.xztar xf soxr-0.1.0-Source.tarcd soxr-0.1.0-Source./gocd Release/makemake install/sbin/ldconfig 安装 speex音频编码解码器。需要安装libogg库1yum install speex-devel 或123456wget http://downloads.xiph.org/releases/speex/speex-1.2rc1.tar.gztar zxf speex-1.2rc1.tar.gzcd speex-1.2rc1./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install ffmpeg ./configure 添加 --enable-libspeex 安装 libfreetype字体呈现库，使用drawtext http://ffmpeg.org/ffmpeg-filters.html#drawtext-11yum install freetype-devel ffmpeg ./configure 添加 --enable-libfreetype 安装 libsdl库1234567wget http://www.libsdl.org/release/SDL-1.2.15.tar.gztar zxf SDL-1.2.15.tar.gzcd SDL-1.2.15./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install/sbin/ldconfig 安装 theoraTheora视频编码器，需要需要libogg，libvorbis和libsdl库123456wget http://downloads.xiph.org/releases/theora/libtheora-1.1.1.tar.bz2tar zjf libtheora-1.1.1.tar.bz2./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --with-ogg=&quot;$HOME/ffmpeg_build&quot; --disable-examples --enable-shared --disable-sdltest --disable-vorbistestmakemake installmake distclean ffmpeg ./configure 添加 --enable-libtheora 安装 twolame12345678wget http://downloads.sourceforge.net/twolame/twolame-0.3.13.tar.gztar zxf twolame-0.3.13.tar.gzcd twolame-0.3.13./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install/sbin/ldconfig 安装 xvid1234567wget http://downloads.xvid.org/downloads/xvidcore-1.3.2.tar.gztar zxf xvidcore-1.3.2.tar.gzcd xvidcorecd build/generic./configure --prefix=&quot;$HOME/ffmpeg_build&quot; makemake install 更新FFmpeg及相关组件更新依赖项删除旧文件，更新依赖项12rm -rf ~/ffmpeg_build ~/bin/&#123;ffmpeg,ffprobe,ffserver,lame,vsyasm,x264,yasm,ytasm&#125;# yum install autoconf automake cmake gcc gcc-c++ git libtool make mercurial nasm pkgconfig zlib-devel 更新 x264123cd ~/ffmpeg_sources/x264make distcleangit pull 然后运行1234./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot; --enable-staticmakemake installmake distclean 更新 x2651234cd ~/ffmpeg_sources/x265rm -rf ~/ffmpeg_sources/x265/build/linux/*hg updatecd ~/ffmpeg_sources/x265/build/linux 然后运行123cmake -G &quot;Unix Makefiles&quot; -DCMAKE_INSTALL_PREFIX=&quot;$HOME/ffmpeg_build&quot; -DENABLE_SHARED:bool=off ../../sourcemakemake install 更新 libfdk_aac123cd ~/ffmpeg_sources/libfdk_aacmake distcleangit pull 然后运行123456cd fdk-aacautoreconf -fiv./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --disable-sharedmakemake installmake distclean 更新 libvpx123cd ~/ffmpeg_sources/libvpxmake cleangit pull 然后运行12345cd libvpx./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --disable-examplesmakemake installmake clean 更新FFmpeg123cd ~/ffmpeg_sources/ffmpegmake distcleangit pull 然后运行123456cd ffmpegPKG_CONFIG_PATH=&quot;$HOME/ffmpeg_build/lib/pkgconfig&quot; ./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --extra-cflags=&quot;-I$HOME/ffmpeg_build/include&quot; --extra-ldflags=&quot;-L$HOME/ffmpeg_build/lib&quot; --bindir=&quot;$HOME/bin&quot; --pkg-config-flags=&quot;--static&quot; --enable-gpl --enable-nonfree --enable-libfdk_aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265makemake installmake distcleanhash -r 还原所有本文安装内容123rm -rf ~/ffmpeg_build ~/ffmpeg_sources ~/bin/&#123;ffmpeg,ffprobe,ffserver,lame,vsyasm,x264,yasm,ytasm&#125;# yum erase autoconf automake cmake gcc gcc-c++ git libtool mercurial nasm pkgconfig zlib-develhash -r 注：如安装其它软件包需要自行删除 自动安装shellhttps://gist.github.com/gboudreau/f24aed76b4cc91bfb2c1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#!/bin/sh # Based on instructions found here: http://wiki.razuna.com/display/ecp/FFMpeg+Installation+on+CentOS+and+RedHat#FFMpegInstallationonCentOSandRedHat-InstallX264 if [ &quot;`/usr/bin/whoami`&quot; != &quot;root&quot; ]; then echo &quot;You need to execute this script as root.&quot; exit 1fi cat &gt; /etc/yum.repos.d/centos.repo&lt;&lt;EOF[centos]name=CentOS-6 – Basebaseurl=http://mirror.centos.org/centos/6/os/x86_64/gpgcheck=1gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-6enabled=1priority=1protect=1includepkgs=SDL SDL-devel gsm gsm-devel libtheora theora-tools libdc1394 libdc1394-devel libraw1394-develEOFrpm --import http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-6 rpm -Uhv http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpmyum -y update yum -y install glibc gcc gcc-c++ autoconf automake libtool git make nasm pkgconfigyum -y install SDL-devel a52dec a52dec-devel alsa-lib-devel faac faac-devel faad2 faad2-develyum -y install freetype-devel giflib gsm gsm-devel imlib2 imlib2-devel lame lame-devel libICE-devel libSM-devel libX11-develyum -y install libXau-devel libXdmcp-devel libXext-devel libXrandr-devel libXrender-devel libXt-develyum -y install libogg libvorbis vorbis-tools mesa-libGL-devel mesa-libGLU-devel xorg-x11-proto-devel zlib-develyum -y install libtheora theora-toolsyum -y install ncurses-develyum -y install libdc1394 libdc1394-develyum -y install amrnb-devel amrwb-devel opencore-amr-devel cd /optwget http://downloads.xvid.org/downloads/xvidcore-1.3.2.tar.gztar xzvf xvidcore-1.3.2.tar.gz &amp;&amp; rm -f xvidcore-1.3.2.tar.gzcd xvidcore/build/generic./configure --prefix=&quot;$HOME/ffmpeg_build&quot; &amp;&amp; make &amp;&amp; make install cd /optwget http://downloads.xiph.org/releases/ogg/libogg-1.3.1.tar.gztar xzvf libogg-1.3.1.tar.gz &amp;&amp; rm -f libogg-1.3.1.tar.gzcd libogg-1.3.1./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --disable-shared &amp;&amp; make &amp;&amp; make install cd /optwget http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.4.tar.gztar xzvf libvorbis-1.3.4.tar.gz &amp;&amp; rm -f libvorbis-1.3.4.tar.gzcd libvorbis-1.3.4./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --with-ogg=&quot;$HOME/ffmpeg_build&quot; --disable-shared &amp;&amp; make &amp;&amp; make install cd /optwget http://downloads.xiph.org/releases/theora/libtheora-1.1.1.tar.gztar xzvf libtheora-1.1.1.tar.gz &amp;&amp; rm -f libtheora-1.1.1.tar.gzcd libtheora-1.1.1./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --with-ogg=&quot;$HOME/ffmpeg_build&quot; --disable-examples --disable-shared --disable-sdltest --disable-vorbistest &amp;&amp; make &amp;&amp; make install cd /optwget http://downloads.sourceforge.net/opencore-amr/vo-aacenc-0.1.2.tar.gztar xzvf vo-aacenc-0.1.2.tar.gz &amp;&amp; rm -f vo-aacenc-0.1.2.tar.gzcd vo-aacenc-0.1.2./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --disable-shared &amp;&amp; make install yum -y remove yasmcd /optwget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gztar xzfv yasm-1.2.0.tar.gz &amp;&amp; rm -f yasm-1.2.0.tar.gzcd yasm-1.2.0./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot; &amp;&amp; make installexport &quot;PATH=$PATH:$HOME/bin&quot; cd /optgit clone http://git.chromium.org/webm/libvpx.gitcd libvpxgit checkout tags/v1.3.0./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --disable-examples &amp;&amp; make &amp;&amp; make install cd /optgit clone git://git.videolan.org/x264.gitcd x264./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot; --enable-static &amp;&amp; make install export LD_LIBRARY_PATH=/usr/local/lib/:$HOME/ffmpeg_build/lib/echo /usr/local/lib &gt;&gt; /etc/ld.so.conf.d/custom-libs.confecho $HOME/ffmpeg_build/lib/ &gt;&gt; /etc/ld.so.conf.d/custom-libs.confldconfig cd /optgit clone git://source.ffmpeg.org/ffmpeg.gitcd ffmpeggit checkout release/2.2PKG_CONFIG_PATH=&quot;$HOME/ffmpeg_build/lib/pkgconfig&quot;export PKG_CONFIG_PATH./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --extra-cflags=&quot;-I$HOME/ffmpeg_build/include&quot; --extra-ldflags=&quot;-L$HOME/ffmpeg_build/lib&quot; --bindir=&quot;$HOME/bin&quot; \\--extra-libs=-ldl --enable-version3 --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libvpx --enable-libfaac \\--enable-libmp3lame --enable-libtheora --enable-libvorbis --enable-libx264 --enable-libvo-aacenc --enable-libxvid --disable-ffplay \\--enable-gpl --enable-postproc --enable-nonfree --enable-avfilter --enable-pthreads --arch=x86_64 &amp;&amp; make install # Test the resulting ffmpeg binarycp $HOME/bin/ffmpeg /usr/bin/ffmpeg -v 参考 http://ju.outofmemory.cn/entry/25624 http://ju.outofmemory.cn/entry/25625 http://ffmpeg.zeranoe.com/builds/ http://blog.csdn.net/yasi_xi/article/details/18810707 http://www.mysql-apache-php.com/ffmpeg-install.htm http://ffmpeg-php.sourceforge.net/ http://inlet-media.de/flvtool2 http://lame.sourceforge.net/ http://www.mplayerhq.hu/design7/dload.html http://flowplayer.org/ http://www.mplayerhq.hu/DOCS/HTML/en/audio-codecs.html http://www.webmasterpals.com/forumdisplay.php?f=6 http://trac.ffmpeg.org/wiki/CentosCompilationGuide#x264 http://trac.ffmpeg.org/wiki/CentosCompilationGuide#libfdk_aac http://trac.ffmpeg.org/wiki/CentosCompilationGuide#libvpx http://trac.ffmpeg.org/wiki/CentosCompilationGuide#FFmpeg http://trac.ffmpeg.org/wiki/x264EncodingGuide http://trac.ffmpeg.org/wiki/AACEncodingGuide http://trac.ffmpeg.org/wiki/CompilationGuide/Centos https://gist.github.com/gboudreau/f24aed76b4cc91bfb2c1 http://www.videolan.org/developers/x264.html","categories":[{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/categories/video/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"ffmpeg","slug":"ffmpeg","permalink":"http://www.yaosansi.com/tags/ffmpeg/"}]},{"title":"Mono4.0.1与Jexus5.6在CentOS7上安装与使用","slug":"mono4.0.1-jexus5.6-on-centos7","date":"2015-05-21T06:00:00.000Z","updated":"2017-12-30T16:00:40.744Z","comments":true,"path":"post/mono4.0.1-jexus5.6-on-centos7/","link":"","permalink":"http://www.yaosansi.com/post/mono4.0.1-jexus5.6-on-centos7/","excerpt":"本文最后更新于：2015-05-21 14:00:00原文：http://www.yaosansi.com/post/mono4.0.1-jexus5.6-on-centos7 鉴于微软最近对.Net家族的大开源策略，最近有时间正好测试一下Mono4与Jexus5.6在CentOS7上安装与使用。 Mono简介Mono是一个由Novell公司(由Ximian发起，并由Miguel de lcaza领导的，一个致力于开创.NET在Linux上使用的开源工程。它包含了一个C#语言的编译器，一个CLR的运行时，和一组类库，并实现了 ADO NET和ASP NET。能够使得开发人员在Linux用C#开发程序。)目前最新版本为：Mono 4.0.1,由于.Net的开源，Mono4.0是首个包含来自微软开源 .Net 代码的版本，也是第一个缺省启用 Csharp 6.0 的 Mono 版本 同时还做了以下改进： 采用微软的开源代码 支持 C# 6.0 优化浮点数 不再支持 2.0、3.5 和 4.0 汇编器 更新 IKVM 更轻量级的调试器开销 提供最基本的 PowerPC64 LE 支持 Mono 4.0.1 只是在4.0基础上进行一些BUG修复和功能改进。","text":"本文最后更新于：2015-05-21 14:00:00原文：http://www.yaosansi.com/post/mono4.0.1-jexus5.6-on-centos7 鉴于微软最近对.Net家族的大开源策略，最近有时间正好测试一下Mono4与Jexus5.6在CentOS7上安装与使用。 Mono简介Mono是一个由Novell公司(由Ximian发起，并由Miguel de lcaza领导的，一个致力于开创.NET在Linux上使用的开源工程。它包含了一个C#语言的编译器，一个CLR的运行时，和一组类库，并实现了 ADO NET和ASP NET。能够使得开发人员在Linux用C#开发程序。)目前最新版本为：Mono 4.0.1,由于.Net的开源，Mono4.0是首个包含来自微软开源 .Net 代码的版本，也是第一个缺省启用 Csharp 6.0 的 Mono 版本 同时还做了以下改进： 采用微软的开源代码 支持 C# 6.0 优化浮点数 不再支持 2.0、3.5 和 4.0 汇编器 更新 IKVM 更轻量级的调试器开销 提供最基本的 PowerPC64 LE 支持 Mono 4.0.1 只是在4.0基础上进行一些BUG修复和功能改进。 Jexus简介Jexus 即 Jexus Web Server，简称JWS，是Linux平台上 的一款ASP.NET WEB服务器，是ASP.NET跨平台部署的一种可选方案，作者宇内流云是想给大家提供一个强劲、坚固、免费、易用的Linux ASP.NET服务器。 与其它WEB服务器相比，Jexus不但具有跨平台ASP.NET服务器这样的标志性特征，同时还拥有内核级的安全监控、入侵检测、URL重写、无文件路由等一系列重要功能和专有特性。 目前Jexus最新版本为5.6.4正式版。 安装Mono和Jexus##安装Mono 在Shell root 用户权限下输入下列命令： 12rpm --import &quot;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF&quot;yum-config-manager --add-repo http://download.mono-project.com/repo/centos/ 如果提示找不到yum-config-manager博客园的张善友老师已经给出了解决方案 因为系统默认没有安装这个命令，这个命令在yum-utils 包里，可以通过命令yum -y install yum-utils 安装 1yum -y install yum-utils 引入测试版本可以使用如下命令：1yum-config-manager --add-repo http://download.mono-project.com/repo/centos-alpha/ 安装有以下几个选择： mono-devel 安装编译版本 mono-completepv 安装所有软件包,这可以解决大多数情况下的”程序集未找到”错误。 referenceassemblies-pcl 安装支持PCL编译的版本。 ca-certificates-mono 如果需要HTTPS连接和SSL证书，请使用版本。 我们安装所有软件包 1yum –y install mono-complete 安装成功后使用mono –V 确认已经成功安装1234567891011[root@yaosansi]# mono -VMono JIT compiler version 4.0.1 (tarball Wed May 20 12:03:20 CST 2015)Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com TLS: __thread SIGSEGV: altstack Notifications: epoll Architecture: x86 Disabled: none Misc: softdebug LLVM: supported, not enabled. GC: sgen 如果安装一切正常，但输入 mono -V 时提示 -bash: mono: command not found, 可以使用如下命令测试:1[root@yaosansi ]# /opt/mono/bin/mono -V 并参考本文中的设置Mono环境变量一节。 ##安装Jexus ###下载 下载地址是：http://www.linuxdot.net/down/jexus-5.6.4.tar.gz 1wget http://www.linuxdot.net/down/jexus-5.6.4.tar.gz ###解压 1tar -zxvf jexus-5.0.tar.gz 安装12cd jexus-5.6.4./install 确认安装成功默认Jexus是绑定0.0.0.0的ip，所以可以通过服务器的ip来访问。(如果无法访问请确认是否由于其它程序占用了默认的80端口) 1http://192.168.8.2 Jexus也提供了一个info地址，用来检测服务器状态和运行时间1http://192.168.8.2/info Welcome to Jexus!Jexus web server uptime: 0 days, 0:44:16 升级安装启动、停止和重启启动 /usr/jexus/jws start 停止 /usr/jexus/jws stop 重启 /usr/jexus/jws restart 通过一键安装脚本Jexus官方论坛网友（Simple）提供 CentOS6版本 默认版本（宇内推荐的）：http://security.ivannet.com/linux/shell/centos6.x_mono_jexus_default.sh OPT版本（喜欢把mono装在/opt/目录下的）：http://security.ivannet.com/linux/shell/centos6.x_mono_jexus_opt.sh CentOS7版本 默认版本（宇内推荐的）：http://security.ivannet.com/linux/shell/centos7.x_mono_jexus_default.sh OPT版本（喜欢把mono装在/opt/目录下的）： http://security.ivannet.com/linux/shell/centos7.x_mono_jexus_opt.sh 一键安装步骤执行以下命令，输入对应的Mono及Jexus完整版本即可。脚本将正动从官方下载、编译和安装，需要耐心等待一段时间。 1234cd /tmpwget http://security.ivannet.com/linux/shell/centos7.x_mono_jexus_default.shchmod +x centos7.x_mono_jexus_default.sh./centos7.x_mono_jexus_default.sh 比如目前Mono输入：4.0.1 Jexus输入：5.6.4 安装完成后使用上面的方法验证是否安装成功。 设置Mono环境变量安装脚本将Mono安装到了/opt/mono/，需要将Mono的目录加入系统$PATH变量 方法一在/etc/profile文件中添加变量【对所有用户生效（永久的）】 1[root@yaosansi ~]# vi /etc/profile 在文件末尾加上如下两行代码 12PATH=/opt/mono/bin:$PATHexport PATH 立即生效 1[root@yaosansi ~]# source /etc/profile 方法二在/etc/profile.d/目录下创建一个Mono的配置创建一个新的mono.sh,并在这个文件内初始化环境变量 1export PATH=$PATH:/opt/mono/bin 要是刚才的修改马上生效，需要执行以下代码 1[root@yaosansi profile.d]# source mono.sh 特别感谢感谢宇内、张善友以及其它热心网友对.Net跨平台的突出贡献。 参考 http://www.mono-project.com/docs/about-mono/releases/4.0.0/ http://www.mono-project.com/docs/about-mono/releases/4.0.1/ http://www.jexus.org/ http://baike.baidu.com/view/4562810.htm http://www.cnblogs.com/shanyou/p/4509980.html http://www.mono-project.com/docs/getting-started/install/linux/#centos-fedora-and-derivatives http://www.mono-project.com/docs/getting-started/mono-basics/ http://www.linuxdot.net/bbsfile-3784 http://security.ivannet.com/linux/shell/ http://www.cnblogs.com/shanyou/archive/2012/10/11/2720597.html","categories":[{"name":"asp.net","slug":"asp-net","permalink":"http://www.yaosansi.com/categories/asp-net/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://www.yaosansi.com/tags/centos/"},{"name":"iexus","slug":"iexus","permalink":"http://www.yaosansi.com/tags/iexus/"},{"name":"mono","slug":"mono","permalink":"http://www.yaosansi.com/tags/mono/"}]},{"title":"Redis在windows下安装与使用","slug":"redis-on-windows","date":"2015-04-19T06:00:00.000Z","updated":"2017-12-30T16:03:33.081Z","comments":true,"path":"post/redis-on-windows/","link":"","permalink":"http://www.yaosansi.com/post/redis-on-windows/","excerpt":"本文最后更新于：2015-04-19 14:00:00原文：http://www.yaosansi.com/post/redis-on-windows Redis简介Redis是一个开源的高级key-value（键-值）缓存与存储，以高性能著称。它也常被称为数据结构服务器，因为其中的键可以存各种数据结构包括字符串、散列、列表、集合、有序集合、位图和hyperloglog。Redis的出现，很大程度补偿了memcached这类KV数据库的不足。不仅可以用于缓存，也可以用于一些场景的存储，在很多情况下是关系数据库很好的补充。它提供了Python，Ruby，Erlang，PHP客户端，使用非常方便。 Redis最近出了3.0版本，最重要的新特性是集群（Redis Cluster），提供Redis功能子集（比如不支持多数据库）的分布式、容错的实现（最多支持1000结点）。 本想折腾一下，不过由于官方并不支持windows，目前（2015.4.10） https://github.com/MSOpenTech/redis 的最新版本仍是 Redis 2.8。","text":"本文最后更新于：2015-04-19 14:00:00原文：http://www.yaosansi.com/post/redis-on-windows Redis简介Redis是一个开源的高级key-value（键-值）缓存与存储，以高性能著称。它也常被称为数据结构服务器，因为其中的键可以存各种数据结构包括字符串、散列、列表、集合、有序集合、位图和hyperloglog。Redis的出现，很大程度补偿了memcached这类KV数据库的不足。不仅可以用于缓存，也可以用于一些场景的存储，在很多情况下是关系数据库很好的补充。它提供了Python，Ruby，Erlang，PHP客户端，使用非常方便。 Redis最近出了3.0版本，最重要的新特性是集群（Redis Cluster），提供Redis功能子集（比如不支持多数据库）的分布式、容错的实现（最多支持1000结点）。 本想折腾一下，不过由于官方并不支持windows，目前（2015.4.10） https://github.com/MSOpenTech/redis 的最新版本仍是 Redis 2.8。 redis windows 2.6 版本高并发时出的BUGredis windows 2.6版的时候在高并发下的BUG 1234lt too large (fd=11112)[3512] 12 Apr 11:25:53.063 # Error registering fd event for the new client: Result too large (fd=11144)[3512] 12 Apr 11:25:53.095 # Error registering fd event for the new client: Resu 博客园的triStoneL给出了问题的原因和相应的解决办法 问题原因1234567Windows版本的redis和原版的redis的实现是一样的,重要的是accept的返回值和aeWinAccept所返回的socket句柄逻辑不一样导致windows版本的redis出现了bug.在Linux中,accept的返回是递增的,因此linux版本的redis是可以处理eventLoop-&gt;setsize个连接的,而在windows上socket返回的句柄会以大概12的步进增长,所以windows版本的redis就只能处理约eventLoop-&gt;setsize/12个连接了.http://www.cnblogs.com/triStoneL/archive/2013/08/23/3277709.html 解决办法1234解决方法比较hack,我在aeEventLoop中添加一个fd_map的数组,用于把fd映射到0到eventLoop-&gt;setsize的值,这样每次从events中存取数据就通过查询fd_map来获取index,从而达到让redis能处理eventLoop-&gt;setsize个连接的效果. redis windows 2.8 版本配置port1# port 6379 port 1345 requirepass1requirepass foobared 注意：由于redis的快速响应，即使设置密码的情况下，仍不建议在对外公开使用，因为暴力破解密码的的可能性将会更大，建议在生产环境使用内部IP和网络访问。 requirepass oaSsihr^VGRAnZMa5=W.UH#bWuue[sHs%tC(d@=lwF5lWJF!6^gT]Yi%@D maxheap &amp; heapdir默认的2.8版本直接运行，由于硬盘空间的原因在大部分的电脑的都会出错。 redis-server.exe redis.windows.conf 123456789101112131415redis-2.8.19&gt;redis-server.exe[16752] 19 Apr 15:41:03.974 #The Windows version of Redis allocates a large memory mapped file for sharingthe heap with the forked process used in persistence operations. This filewill be created in the current working directory or the directory specified bythe &apos;heapdir&apos; directive in the .conf file. Windows is reporting that there isinsufficient disk space available for this file (Windows error 0x70).You may fix this problem by either reducing the size of the Redis heap withthe --maxheap flag, or by moving the heap file to a local drive with sufficientspace.Please see the documentation included with the binary distributions for moredetails on the --maxheap and --heapdir flags.Redis can not continue. Exiting. 参照提示，是参数maxheap和heapdir有问题。打开默认的配置文件：redis.windows.conf maxheap1234567891011121314151617181920212223242526272829303132333435# The Linux version of Redis relies on the system call fork() to perform# point-in-time snapshots of the heap. In addition to the AOF and RDB backup# mechanism, the master-slave synchronization and clustering features are # dependent on this behavior of fork(). In order for the Windows version to # perform like the Linux version we had to simulate this aspect of fork().# Doing so meant moving the Redis heap into a memory mapped file that can# be shared with a child process. ## *** There must be disk space available for this file in order for Redis # to launch. *** The default configuration places this file in the local # appdata directory. If you wish to move this file to another local disk,# use the heapdir flag as described below.## The maxheap flag controls the maximum size of this memory mapped file,# as well as the total usable space for the Redis heap. Running Redis# without either maxheap or maxmemory will result in a memory mapped file # being created that is equal to the size of physical memory. During # fork() operations the total page file commit will max out at around:## (size of physical memory) + (2 * size of maxheap)## For instance, on a machine with 8GB of physical RAM, the max page file # commit with the default maxheap size will be (8)+(2*8) GB , or 24GB. The# default page file sizing of Windows will allow for this without having # to reconfigure the system. Larger heap sizes are possible, but the maximum# page file size will have to be increased accordingly.# # The Redis heap must be larger than the value specified by the maxmemory # flag, as the heap allocator has its own memory requirements and # fragmentation of the heap is inevitable. If only the maxmemory flag is # specified, maxheap will be set at 1.5*maxmemory. If the maxheap flag is # specified along with maxmemory, the maxheap flag will be automatically # increased if it is smaller than 1.5*maxmemory. # # maxheap &lt;bytes&gt; 我们看到，Linux版本的redis依赖于系统调用fork()来执行堆的时间快照，windows版本模拟了fork方法。maxheap标志来控制此内存映射文件的最大大小，redis在未设置 maxheap 或 maxmemory时，内存映射文件的大小等于物理内存的大小，fork()操作的总页面文件最大将是（物理内存大小）+（2maxheap）我们看到如果设置了maxmemory，那么maxheap=1.5maxmemory，如果maxheap设置的小于1.5*maxmemory，那么maxheap的值将会自动增加。 根据以上原因，我们不难分析出，当redis所用使用的硬盘空间不足时，便会引发上面的错误。 我们设置maxheap参数为4个G，即占用硬盘空间4G.再次运行，发现一切正常。 maxheap 4024000000 heapdir那么heapdir是做什么用的呢？ 12345678910# The heap memory mapped file must reside on a local path for heap sharing # between processes to work. A UNC path will not suffice here. For maximum # performance this should be located on the fastest local drive available.# This value defaults to the local application data folder(e.g.,# &quot;%USERPROFILE%\\AppData\\Local&quot;). Since this file can be very large, you# may wish to place this on a drive other than the one the operating system # is installed on.## Note that you must specify a directory here, not a file name.# heapdir &lt;directory path(absolute or relative)&gt; heapdir实际指定了内存映射文件的目录，默认在%USERPROFILE%\\AppData\\Local,大部分windows都安装在ｃ盘，而ｃ盘空间有限，结合这两个参数，我们才发现最上面的默认错误原来是我们系统硬盘可用空间不足导致的。 注意：heapdir不支持网络路径，只支持本机路径，但支持相对路径和绝对路径。 这里我们把heapdir指定在redis默认路径指定在根目录下:redis_heapdir heapdir redis_heapdir/ 服务安装服务--service-install 安装服务的参数必须为redis-server的第一个参数，默认服务会使用帐户NT AUTHORITY\\NetworkService，默认不会启动服务。 实例 redis-server --service-install redis.windows.conf --loglevel verbose 卸载服务--service-uninstall 实例 redis-server --service-uninstall 启动服务redis-server --service-start 停止服务redis-server --service-stop 命名服务--service-name name 用来使用多实例redis服务。此参数要放在service-install, service-start, service-stop or service-uninstall的后面。 123456redis-server --service-install –service-name redisService1 –port 10001redis-server --service-start –service-name redisService1redis-server --service-install –service-name redisService2 –port 10002redis-server --service-start –service-name redisService2redis-server --service-install –service-name redisService3 –port 10003redis-server --service-start –service-name redisService3 客户端工具 RedisStudio: https://github.com/cinience/RedisStudio ##参考 http://redis.io https://github.com/MSOpenTech/redis https://github.com/ServiceStack/redis-windows http://stackoverflow.com/questions/28114405/how-do-i-install-a-redis-server-on-the-d-drive http://stackoverflow.com/questions/20554362/configuring-redis-on-windows http://blog.csdn.net/lijiecong/article/details/37754599 http://blog.csdn.net/renfufei/article/details/38474435","categories":[{"name":"cache","slug":"cache","permalink":"http://www.yaosansi.com/categories/cache/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://www.yaosansi.com/tags/redis/"}]},{"title":"Memcached在windows下安装与使用","slug":"memcached-on-windows","date":"2014-08-03T10:24:44.000Z","updated":"2017-12-30T16:00:26.178Z","comments":true,"path":"post/memcached-on-windows/","link":"","permalink":"http://www.yaosansi.com/post/memcached-on-windows/","excerpt":"建议：windows系统下仅为测试所有，生产环境下服务端应使用Linux系统。本文最后更新于：2014-08-03 18:24原文：http://www.yaosansi.com/post/memcached-on-windows ##Memcached介绍 Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。但是它并不提供冗余（例如，复制其hashmap条目）；当某个服务器S停止运行或崩溃了，所有存放在S上的键/值对都将丢失。 百度百科baike.baidu.com/view/794242.htm","text":"建议：windows系统下仅为测试所有，生产环境下服务端应使用Linux系统。本文最后更新于：2014-08-03 18:24原文：http://www.yaosansi.com/post/memcached-on-windows ##Memcached介绍 Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。但是它并不提供冗余（例如，复制其hashmap条目）；当某个服务器S停止运行或崩溃了，所有存放在S上的键/值对都将丢失。 百度百科baike.baidu.com/view/794242.htm Memcached官方： http://memcached.org/ ##Windows版本下载与安装 ###下载地址memcached 1.4.4 for Windows 32-bit ###安装Memcache为系统服务 下载memcached的windows稳定版，解压放某个盘下面，比如在c:\\memcached 在CMD下输入 “c:\\memcached\\memcached.exe -d install“ 安装. 再输入：”c:\\memcached\\memcached.exe -d start“ 启动。 NOTE:也可以不安装直接启动以后memcached将作为windows的一个服务每次开机时自动启动。这样服务器端已经安装完毕了。 如果下载的是二进制的版本，直接运行就可以了，可以加上参数来加以设置。 ###常用命令1234567891011121314-p &lt;num&gt; 监听的端口-l &lt;ip_addr&gt; 连接的IP地址, 默认是本机-d start 启动memcached服务-d restart 重起memcached服务-d stop|shutdown 关闭正在运行的memcached服务-d install 安装memcached服务-d uninstall 卸载memcached服务-u &lt;username&gt; 以&lt;username&gt;的身份运行 (仅在以root运行的时候有效)-m &lt;num&gt; 最大内存使用，单位MB。默认64MB-M 内存耗尽时返回错误，而不是删除项-c &lt;num&gt; 最大同时连接数，默认是1024-f &lt;factor&gt; 块大小增长因子，默认是1.25-n &lt;bytes&gt; 最小分配空间，key+value+flags默认是48-h 显示帮助 然后就可以用.net 的memcached客户端来试一下了。 ##客户端使用 ###C#下可用的library 每个客户端API中都有详细的说明和注释 .NET memcached client library https://sourceforge.net/projects/memcacheddotnet/ EnyimMemcached http://www.codeplex.com/EnyimMemcached/ - Client developed in .NET 2.0 keeping performance and extensibility inmind. (Supports consistent hashing.) beitmemcached h.NET memcached client library http://code.google.com/p/beitmemcached/ - Client developed by BeIT with many new features 博客园使用的组合为： couchbase+EnyimMemcached http://www.couchbase.com/ ###一致性hash算法 memcache的一致性hash算法使用 .NET实现（注释参考JAVA版本）link12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class KetamaNodeLocator&#123; //原文中的JAVA类TreeMap实现了Comparator方法，这里我图省事，直接用了net下的SortedList，其中Comparer接口方法） private SortedList&lt;long, string&gt; ketamaNodes = new SortedList&lt;long, string&gt;(); private HashAlgorithm hashAlg; private int numReps = 160; //此处参数与JAVA版中有区别，因为使用的静态方法，所以不再传递HashAlgorithm alg参数 public KetamaNodeLocator(List&lt;string&gt; nodes, int nodeCopies) &#123; ketamaNodes = new SortedList&lt;long, string&gt;(); numReps = nodeCopies; //对所有节点，生成nCopies个虚拟结点 foreach (string node in nodes) &#123; //每四个虚拟结点为一组 for (int i = 0; i &lt; numReps / 4; i++) &#123; //getKeyForNode方法为这组虚拟结点得到惟一名称 byte[] digest = HashAlgorithm.computeMd5(node + i); /** Md5是一个16字节长度的数组，将16字节的数组每四个字节一组，分别对应一个虚拟结点，这就是为什么上面把虚拟结点四个划分一组的原因*/ for (int h = 0; h &lt; 4; h++) &#123; long m = HashAlgorithm.hash(digest, h); ketamaNodes[m] = node; &#125; &#125; &#125; &#125; public string GetPrimary(string k) &#123; byte[] digest = HashAlgorithm.computeMd5(k); string rv = GetNodeForKey(HashAlgorithm.hash(digest, 0)); return rv; &#125; string GetNodeForKey(long hash) &#123; string rv; long key = hash; //如果找到这个节点，直接取节点，返回 if (!ketamaNodes.ContainsKey(key)) &#123; //得到大于当前key的那个子Map，然后从中取出第一个key，就是大于且离它最近的那个key 说明详见: http://www.javaeye.com/topic/684087 var tailMap = from coll in ketamaNodes where coll.Key &gt; hash select new &#123; coll.Key &#125;; if (tailMap == null || tailMap.Count() == 0) key = ketamaNodes.FirstOrDefault().Key; else key = tailMap.FirstOrDefault().Key; &#125; rv = ketamaNodes[key]; return rv; &#125;&#125; 下面的代码与JAVA中有所不同，它使用静态方法实现 静态方法实现link1234567891011121314151617181920212223242526public class HashAlgorithm&#123; public static long hash(byte[] digest, int nTime) &#123; long rv = ((long)(digest[3 + nTime * 4] &amp; 0xFF) &lt;&lt; 24) | ((long)(digest[2 + nTime * 4] &amp; 0xFF) &lt;&lt; 16) | ((long)(digest[1 + nTime * 4] &amp; 0xFF) &lt;&lt; 8) | ((long)digest[0 + nTime * 4] &amp; 0xFF); return rv &amp; 0xffffffffL; /* Truncate to 32-bits */ &#125; /** * Get the md5 of the given key. */ public static byte[] computeMd5(string k) &#123; MD5 md5 = new MD5CryptoServiceProvider(); byte[] keyBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(k)); md5.Clear(); //md5.update(keyBytes); //return md5.digest(); return keyBytes; &#125;&#125; ##Linux系统安装memcached 123456wget http://memcached.org/latesttar -zxvf memcached-1.x.x.tar.gzcd memcached-1.x.x./configure --prefix=/usr/local/memcachedmake &amp;&amp; make testsudo make install Ubuntu &amp; Debianapt-get install memcached Redhat/Fedorayum install memcached FreeBSDportmaster databases/memcached 参考 memcached官方 http://www.memcached.org/ https://code.google.com/p/memcached/ Memcached深度分析 一致性Hash算法(KetamaHash)的c#实现 http://www.cnblogs.com/daizhj/archive/2010/08/24/1807324.html","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"http://www.yaosansi.com/tags/windows/"},{"name":"memcached","slug":"memcached","permalink":"http://www.yaosansi.com/tags/memcached/"}]},{"title":"GitHub上Markdown基本使用","slug":"markdown-on-github","date":"2014-08-01T04:44:50.000Z","updated":"2017-12-30T16:00:13.463Z","comments":true,"path":"post/markdown-on-github/","link":"","permalink":"http://www.yaosansi.com/post/markdown-on-github/","excerpt":"本文最后更新于：2014-08-01 12:44:50原文：http://www.yaosansi.com/post/markdown-on-github/ 目录 基本写作1.1 段落1.2 标题1.3 引用1.4 粗体和斜体1.5 删除线 列表2.1 无序列表2.1 有序列表2.3 嵌套列表 代码格式化3.1 单行格式化3.2 多行格式化 链接和图片4.1 链接4.2 图片 GitHub扩展语法5.1 语法高亮5.2 任务列表5.3 表格 其它6.1 转义字符","text":"本文最后更新于：2014-08-01 12:44:50原文：http://www.yaosansi.com/post/markdown-on-github/ 目录 基本写作1.1 段落1.2 标题1.3 引用1.4 粗体和斜体1.5 删除线 列表2.1 无序列表2.1 有序列表2.3 嵌套列表 代码格式化3.1 单行格式化3.2 多行格式化 链接和图片4.1 链接4.2 图片 GitHub扩展语法5.1 语法高亮5.2 任务列表5.3 表格 其它6.1 转义字符 [TOC] Markdown基础1. 基本写作1.1 段落段落在Markdown中由一行或多行的空白行组成. 123这是段落一. 这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落二.这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落一. 这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一.这是段落一. 这是段落二.这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 这是段落二. 1.2 标题在标题文字前面加一个或多个#符号,此行文字即为一行标题.#符号的数量决定标题的大小. 1234# 这是标题一 (&lt;h1&gt;)## 这是标题二 (&lt;h2&gt;)...###### 这是标题六(&lt;h6&gt;) 这是标题一这是标题二… 这是标题六1.3 引用引用以&gt;符号开始12下面就是引用&gt; 这里是引用 下面就是引用 这里是引用 1.4 粗体和斜体12*这是斜体***这是粗体** 这是斜体这是粗体 也可使用下划线(_)代替(*)号 1.5 删除线1~~这是删除线~~ 这是删除线 2. 列表2.1 无序列表可以在每个列表项前加星号(*)或横线(-) 1234567* 项目一* 项目二* 项目三- 项目一- 项目二- 项目三 项目一 项目二 项目三 项目一 项目二 项目三 2.2 有序列表在每个项目前增加数字和句点(英文)即可.1231. 项目一2. 项目二3. 项目三 项目一 项目二 项目三 2.3 嵌套列表在每个项目前增加两个空格缩进123456789101112131. 项目一 1. 嵌套有序列表项目一 2. 嵌套有序列表项目二 - 嵌套无序列表项目一 - 嵌套无序列表项目二 - 嵌套无序列表项目三 1. 多级嵌套有序列表项目一 2. 多级嵌套有序列表项目二 - 嵌套无序列表项目一 - 嵌套无序列表项目二 - 嵌套无序列表项目三2. 项目二3. 项目三 项目一 嵌套有序列表项目一 嵌套有序列表项目二 嵌套无序列表项目一 嵌套无序列表项目二 嵌套无序列表项目三 多级嵌套有序列表项目一 多级嵌套有序列表项目二 嵌套无序列表项目一 嵌套无序列表项目二 嵌套无序列表项目三 项目二 项目三 3. 代码格式化3.1 单行格式化使用反引号（```）作为单行代码的引用 1Here&apos;s an idea: why don&apos;t we take `SuperiorProject` and turn it into `**Reasonable**Project`. Here’s an idea: why don’t we take SuperiorProject and turn it into **Reasonable**Project. 3.2 多行格式化使用三个反引号（```）作为多行代码的引用 123456Check out this neat program I wrote:` ` `x = 0x = 2 + 2what is x` ` ` Check out this neat program I wrote: 123x = 0x = 2 + 2what is x 4. 链接和图片### 4.1 链接链接的格式如下：12345671 http://www.yaosansi.com/ (自动生成链接)2 [这是链接内容](http://www.yaosansi.com/这是链接地址)3 [这是链接内容](http://www.yaosansi.com/这是链接地址 &quot;这里是链接说明&quot;)4 [这是链接内容][1]文档任意位置(通常是尾部)[1]:http://www.yaosansi.com/这是链接地址 &quot;这里是链接说明&quot; 1 http://www.yaosansi.com/ (自动生成链接)2 这是链接内容3 这是链接内容4 这是链接内容 4.2 图片图片格式如下:1![提示文字](图片地址) 提示文字 5. GitHub扩展语法5.1 语法高亮1234567` ` `javascriptfunction fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:&apos;#foo&apos;&#125;) &#125;&#125;` ` ` 5.2 任务列表12345- [x] 已完成任务一- [x] 已完成任务二- [x] 已完成任务三- [ ] 未完成任务四- [ ] 未完成任务五 已完成任务一 已完成任务二 已完成任务三 未完成任务四 未完成任务五 5.3 表格1234第一表头 | 第二表头------------ | -------------第一单元格内容 | 第二单元格内容第一列内容 | 第二列内容 第一表头 第二表头 第一单元格内容 第二单元格内容 第一列内容 第二列内容 5.4 Emoji表情GitHub支持Emoji : smile: : running:更多表情参考:http://www.emoji-cheat-sheet.com/ 6. 其它6.1 转义字符可以用反斜杠来插入一些在语法中有其它意义的符号，如：可以在星号的前面加上反斜杠1\\*literal asterisks\\* *literal asterisks* 反斜杠支持下面的字符123456789101112\\ 反斜杠` 反引号* 星号_ 底线&#123;&#125; 大括号[] 方括号() 括号# 井字号+ 加号- 减号. 英文句点! 惊叹号 参考 Markdown Basics https://help.github.com/articles/markdown-basics Mastering Markdown https://guides.github.com/features/mastering-markdown/ GitHub Flavored Markdown https://help.github.com/articles/github-flavored-markdown","categories":[{"name":"web","slug":"web","permalink":"http://www.yaosansi.com/categories/web/"}],"tags":[{"name":"github","slug":"github","permalink":"http://www.yaosansi.com/tags/github/"},{"name":"markdown","slug":"markdown","permalink":"http://www.yaosansi.com/tags/markdown/"}]},{"title":"更换ip后，IIS无法正常启动","slug":"iis-fails-to-start-after-change-ip","date":"2014-07-24T05:44:08.000Z","updated":"2017-12-30T15:59:22.192Z","comments":true,"path":"post/iis-fails-to-start-after-change-ip/","link":"","permalink":"http://www.yaosansi.com/post/iis-fails-to-start-after-change-ip/","excerpt":"本文最后更新于：2014-07-24 13:44:08原文：http://www.yaosansi.com/post/iis-fails-to-start-after-change-ip/ ##概述今天更换IP后出现无法正常访问,经过近1小时的折腾终于解决了,现记录如下: ##系统环境 操作系统: Win2008 网络: 同一网卡绑定两个IP 192.168.0.1 192.168.0.2 原WEB服务器: IIS(192.168.0.1) Tomcat(192.168.0.2) 更换IP后: IIS(192.168.1.1) Tomcat(192.168.0.2) 两服务器都使用80端口,使用不同的IP绑定不同的域名","text":"本文最后更新于：2014-07-24 13:44:08原文：http://www.yaosansi.com/post/iis-fails-to-start-after-change-ip/ ##概述今天更换IP后出现无法正常访问,经过近1小时的折腾终于解决了,现记录如下: ##系统环境 操作系统: Win2008 网络: 同一网卡绑定两个IP 192.168.0.1 192.168.0.2 原WEB服务器: IIS(192.168.0.1) Tomcat(192.168.0.2) 更换IP后: IIS(192.168.1.1) Tomcat(192.168.0.2) 两服务器都使用80端口,使用不同的IP绑定不同的域名 PS.不要问为什么不用NGINX等做做反向代理 ##问题一###现象 IIS无任何提示,本机无法开启80端口 ###解决方法怀疑是两个WEB Server相互冲突,重启系统 ##问题二###现象 指定的网络名格式无效 万维网发布服务(WWW 服务)没有为站点 2 注册 URL 前缀 http://www.yaoasnsi.com:80:192.168.1.1/ 。 该站点已被禁用。数据字段包含错误号。 其中192.168.1.1为我们更换后的要绑定的IP ###解决方法GOOGLE发现此文件 指定的网络名格式无效 ,按此操作后,重启服务器 WIN2003， 换了个IP以后， IIS 里面的站点就无法启动了， 一启动就出现 “指定的网络名格式无效”， 怎么解决？？ 这与以前系统绑定ＩＰ有关.只要把以前的ＩＩＳ配置文件中与绑定有关的数据修改回来就可以用了 绑定到某IP： httpcfg set iplisten -i 192.168.1.1 即命令使用IIS的只监听指定的IP及端口 查看绑定： httpcfg query iplisten 删除绑定： httpcfg delete iplisten -i 192.168.1.1 为解决这上面的问题，只要你把以前的绑定的ＩＰ删除，然后，再绑定0.0.0.0以后.重启服务器.在ＩＩＳ中选全部未分配ＩＰ就可以使用了. 查看绑定： httpcfg query iplisten 显示 192.168.0.1 删除绑定： httpcfg delete iplisten -i 192.168.0.1 绑定0.0.0.0： httpcfg set iplisten -i 0.0.0.0 重启IIS： IISReset httpcfg 在windows 2003光盘上有.http://support.microsoft.com/kb/813368/ ##问题三###现象 返回404 http not found 按问题二解决以后,发现IIS可以正常访问,但Tomcat不能访问了. ###解决方法按问题二解决方法,将最后一步的 绑定0.0.0.0 改成 绑定192.168.1.1 ,重启服务器. ##问题四###现象 另一个程序正在使用此文件，进程无法访问 ###解决方法此问题因其它程序占用80端口导致IIS无法使用,确定无其它程序占用后怀疑是两个WEB Server相互冲突,重启系统即正常了.","categories":[{"name":"web","slug":"web","permalink":"http://www.yaosansi.com/categories/web/"}],"tags":[{"name":"iis","slug":"iis","permalink":"http://www.yaosansi.com/tags/iis/"}]},{"title":"如何将Emmet安装到到 Sublime text 3？","slug":"install-emmet-for-sublime-text-3","date":"2014-06-04T06:36:03.000Z","updated":"2017-12-30T16:00:00.078Z","comments":true,"path":"post/install-emmet-for-sublime-text-3/","link":"","permalink":"http://www.yaosansi.com/post/install-emmet-for-sublime-text-3/","excerpt":"本文最后更新于：2014-06-4 14:36:03原文：http://www.yaosansi.com/post/install-emmet-for-sublime-text-3/ 这是Sublime text 3与2版本的安装是有区别的，下面的方法是我感觉比较简单的，其他的要命令什么的感觉太复杂了，经测试是OK的。","text":"本文最后更新于：2014-06-4 14:36:03原文：http://www.yaosansi.com/post/install-emmet-for-sublime-text-3/ 这是Sublime text 3与2版本的安装是有区别的，下面的方法是我感觉比较简单的，其他的要命令什么的感觉太复杂了，经测试是OK的。 ##一、安装Package Control 1、通过快捷键 ctrl+` 或者 View &gt; Show Console 菜单打开控制台 2、粘贴对应版本的代码后回车安装 适用于 Sublime Text 3： 1import urllib.request,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib.request.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()) 适用于 Sublime Text 2： 1import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read());print('Please restart Sublime Text to finish installation') 另：手动下载安装，请参考：http://www.cnblogs.com/tinyphp/p/3217457.html ##二、安装Emmet ###a、菜单安装 1、点击菜单Preference–&gt;Package Control2、等待几秒后再弹出如下内容，敲键盘emmet，选择emmet ###b、命令行安装1、打开命令模式 Ctrl+Shift+p2、输入 install package3、等待几秒后再弹出如下内容，敲键盘emmet，选择emmet 在 Emmet 安装完成后，会显示如下屏幕：然后会自动安装PyV8，安装完成，重启 Sublime Text 3。","categories":[{"name":"soft","slug":"soft","permalink":"http://www.yaosansi.com/categories/soft/"}],"tags":[{"name":"sublime text","slug":"sublime-text","permalink":"http://www.yaosansi.com/tags/sublime-text/"},{"name":"emmet","slug":"emmet","permalink":"http://www.yaosansi.com/tags/emmet/"}]},{"title":"npm mirror","slug":"npm-mirror","date":"2014-04-01T05:42:59.000Z","updated":"2017-12-30T16:01:29.261Z","comments":true,"path":"post/npm-mirror/","link":"","permalink":"http://www.yaosansi.com/post/npm-mirror/","excerpt":"本文最后更新于：2014-04-01 13:42:59原文：http://www.yaosansi.com/post/npm-mirror/ ##What is an npm mirror?A mirror is simply a read-only copy of the main npm registry. A mirror lets you install any module that exists in npm. The only thing you can’t do is publish updates or new modules. ##How do I use an npm mirror?The npm command line tool makes it very easy to use a mirror. There are two ways. ###Specify the registry when installing: 1$ npm install --registry http://registry.npmjs.org Update the registry permanently in the config:1$ npm config set registry http://registry.npmjs.org","text":"本文最后更新于：2014-04-01 13:42:59原文：http://www.yaosansi.com/post/npm-mirror/ ##What is an npm mirror?A mirror is simply a read-only copy of the main npm registry. A mirror lets you install any module that exists in npm. The only thing you can’t do is publish updates or new modules. ##How do I use an npm mirror?The npm command line tool makes it very easy to use a mirror. There are two ways. ###Specify the registry when installing: 1$ npm install --registry http://registry.npmjs.org Update the registry permanently in the config:1$ npm config set registry http://registry.npmjs.org Main npm RegistryRegistry: http://registry.npmjs.orgWebsite: npmjs.orgRegion: GlobalData Center: Joyent, FastlyMaintainer: npm Inc.Established: 2010 European npm MirrorRegistry: http://registry.npmjs.euWebsite: npmjs.euRegion: Europe, GermanyData Center: HetznerMaintainer: Maciej MałeckiEstablished: November, 2013 Australian npm MirrorRegistry: http://registry.npmjs.org.auWebsite: npm.nodejs.org.auRegion: AustraliaData Center: AWSMaintainer: Rod VaggEstablished: July, 2013 Nodejitsu US npm MirrorRegistry: https://registry.nodejitsu.comWebsite: nodejitsu.comRegion: US EastData Center: JoyentMaintainer: NodejitsuEstablished: January, 2014 StrongLoop US npm MirrorRegistry: https://npm.strongloop.comWebsite: strongloop.comRegion: US WestData Center: RackspaceMaintainer: StrongLoopEstablished: February, 2014 China npm mirrorRegistry: http://registry.cnpmjs.orgWebsite: http://www.cnpmjs.org/Region: China","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.yaosansi.com/categories/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.yaosansi.com/tags/nodejs/"},{"name":"mirror","slug":"mirror","permalink":"http://www.yaosansi.com/tags/mirror/"}]},{"title":"sublime text 3 license(Build 3059 x64)","slug":"sublime-text-3-license","date":"2014-03-13T08:44:08.000Z","updated":"2017-12-30T16:02:22.099Z","comments":true,"path":"post/sublime-text-3-license/","link":"","permalink":"http://www.yaosansi.com/post/sublime-text-3-license/","excerpt":"原文：http://www.yinqisen.cn/blog-246.html 之前修改check_license 返回值，和其他替换16进制编码的方式都失效了，输入下面的注册码就可以了。申明：只供研究学习，请遵守作者版权。","text":"原文：http://www.yinqisen.cn/blog-246.html 之前修改check_license 返回值，和其他替换16进制编码的方式都失效了，输入下面的注册码就可以了。申明：只供研究学习，请遵守作者版权。 12345678910111213----- BEGIN LICENSE -----Andrew WeberSingle User LicenseEA7E-855605813A03DD 5E4AD9E6 6C0EEB94 BC99798F942194A6 02396E98 E62C9979 4BB979FE91424C9D A45400BF F6747D88 2FB8807890F5CC94 1CDC92DC 8457107A F151657B1D22E383 A997F016 42397640 33F41CFCE1D0AE85 A0BBD039 0E9C8D55 E1B89D5D5CDB7036 E56DE1C0 EFCC0840 650CD3A6B98FC99C 8FAC73EE D2B95564 DF450523------ END LICENSE ------","categories":[{"name":"soft","slug":"soft","permalink":"http://www.yaosansi.com/categories/soft/"}],"tags":[{"name":"sublime text","slug":"sublime-text","permalink":"http://www.yaosansi.com/tags/sublime-text/"}]},{"title":"【转载】如何区分H.264视频流的I frame 和 P frame","slug":"how-to-distinguish-between-I-frame-and-P-frame-H264-video-streams","date":"2013-03-29T05:43:16.000Z","updated":"2017-12-30T15:58:49.820Z","comments":true,"path":"post/how-to-distinguish-between-I-frame-and-P-frame-H264-video-streams/","link":"","permalink":"http://www.yaosansi.com/post/how-to-distinguish-between-I-frame-and-P-frame-H264-video-streams/","excerpt":"怎么区分H.264视频流的I frame 和 P frame？我是新手，前些天自己看那H.264规范文档及其他资料寻找答案时，还有几个概念的关系还没能理解清楚，望达人指点一二： NAL、Slice与frame意思及相互关系NAL nal_unit_type中的1（非IDR图像的编码条带）、2（编码条带数据分割块A）、3（编码条带数据分割块B）、4（编码条带数据分割块C）、5（IDR图像的编码条带）种类型与Slice种的三种编码模式：I_slice、P_slice、B_slice 还有frame的3种类型：I frame、P frame、 B frame之间有什么映射关系么？最后，NAL nal_unit_type中的6（SEI）、7（SPS）、8（PPS）属于什么帧呢？","text":"怎么区分H.264视频流的I frame 和 P frame？我是新手，前些天自己看那H.264规范文档及其他资料寻找答案时，还有几个概念的关系还没能理解清楚，望达人指点一二： NAL、Slice与frame意思及相互关系NAL nal_unit_type中的1（非IDR图像的编码条带）、2（编码条带数据分割块A）、3（编码条带数据分割块B）、4（编码条带数据分割块C）、5（IDR图像的编码条带）种类型与Slice种的三种编码模式：I_slice、P_slice、B_slice 还有frame的3种类型：I frame、P frame、 B frame之间有什么映射关系么？最后，NAL nal_unit_type中的6（SEI）、7（SPS）、8（PPS）属于什么帧呢？ 1 frame的数据可以分为多个slice.每个slice中的数据，在帧内预测只用到自己slice的数据， 与其他slice 数据没有依赖关系。NAL 是用来将编码的数据进行大包的。 比如，每一个slice 数据可以放在NAL 包中。I frame 是自己独立编码，不依赖于其他frame 数据。P frame 依赖 I frame 数据。B frame 依赖 I frame, P frame 或其他 B frame 数据。 那NAL nal_unit_type中的哪几种类型是I frame，现在只能确定nal_unit_type==5（IDR图像的编码条带）是I frame sps、pps、SEI算不算I frame呢？ 还有 属于编码条带分割的DPA、DPB、DPC呢？能给个从视频流中提取I frame 和P frame的方法么？ 一个frame是可以分割成多个Slice来编码的，而一个Slice编码之后被打包进一个NAL单元，不过NAL单元除了容纳Slice编码的码流外，还可以容纳其他数据，比如序列参数集SPS 123456789101112131415161718192021222324// H.264 NAL typeenum H264NALTYPE&#123;H264NT_NAL = 0,H264NT_SLICE,H264NT_SLICE_DPA,H264NT_SLICE_DPB,H264NT_SLICE_DPC,H264NT_SLICE_IDR,H264NT_SEI,H264NT_SPS,H264NT_PPS,&#125;;int H264GetNALType(LPVOID pBSBuf, const LONG nBSLen)&#123;if ( nBSLen &lt; 5 ) // 不完整的NAL单元return H264NT_NAL;UINT8* pBS = (UINT8 *)pBSBuf;ULONG nType = pBS[4] &amp; 0x1F; // NAL类型在固定的位置上 :)if ( nType &lt;= H264NT_PPS )return nType;return 0;&#125; 其中 H264NT_SLICE_IDR 是关键帧，H264NT_SLICE 是P帧 一个frame是可以分割成多个Slice来编码的，而一个Slice编码之后被打包进一个NAL单元，不过NAL单元除了容纳Slice编码的码流外，还可以容纳其他数据，比如序列参数集SPS。 1、NAL、Slice与frame意思及相互关系 NAL指网络提取层，里面放一些与网络相关的信息Slice是片的意思，264中把图像分成一帧（frame）或两场（field），而帧又可以分成一个或几个片（Slilce）；片由宏块（MB）组成。宏块是编码处理的基本单元。 2、NAL nal_unit_type中的1（非IDR图像的编码条带）、2（编码条带数据分割块A）、3（编码条带数据分割块B）、4（编码条带数据分割块C）、5（IDR图像的编码条带）种类型与 Slice种的三种编码模式：I_slice、P_slice、B_sliceNAL nal_unit_type 里的五种类型 代表接下来数据是表示啥信息的和具体如何分块。I_slice、P_slice、B_slice 表示I类型的片、P类型的片，B类型的片.其中I_slice为帧内预测模式编码；P_slice为单向预测编码或帧内模式；B_slice 中为双向预测或帧内模式。 3、还有frame的3种类型：I frame、P frame、 B frame之间有什么映射关系么？ I frame、P frame、 B frame关系同 I_slice、P_slice、B_slice，slice和frame区别在问题1中已经讲明白。 4、最后，NAL nal_unit_type中的6（SEI）、7（SPS）、8（PPS）属于什么帧呢？ NAL nal_unit_type 为序列参数集（SPS）、图像参数集（PPS）、增强信息（SEI）不属于啥帧的概念。表示后面的数据信息为序列参数集（SPS）、图像参数集（PPS）、增强信息（SEI）。 h.264解码中首先过滤码流获得参数集，参数集是H.264标准的一个新概念，是一种通过改进视频码流结构增强错误恢复能力的方法。 众所周知，一 些关键信息比特的丢失（如序列和图像的头信息）会造成解码的严重负面效应，而H.264把这些关键信息分离出来，凭借参数集的设计，确保在易出错的环境中 能正确地传输。这种码流结构的设计无疑增强了码流传输的错误恢复能力。 H.264的参数集又分为序列参数集（Sequence parameter set）和图像参数集（Picture parameter set）。其中，序列参数集包括一个图像序列的所有信息，即两个IDR图像间的所有图像信息。图像参数集包括一个图像的所有分片的所有相关信息，包括图像 类型、序列号等，解码时某些序列号的丢失可用来检验信息包的丢失与否。多个不同的序列和图像参数集存储在解码器中，编码器依据每个编码分片的头部的存储位置来选择适当的参数集，图像参数集本身也包括使用的序列参数集参考信息。 参数集具体实现的方法也是多样化的：（1）通过带外传输，这种方式要求参数集通过可靠的协议，在首个片编码到达之前传输到解码器；（2）通过带内传 输，这需要为参数集提供更高级别的保护，例如发送复制包来保证至少有一个到达目标；（3）在编码器和解码器采用硬件处理参数集。 序列参数集以及图像参数集要在解码前传输，在解码的过程中被激活。一旦被激活，则上一个序列参数集或者图象参数集就失效了。图象参数集是被使用它的 slice data或者使用它的A分割的Nalu激活的。而序列参数集是被使用它的图象参数集或者包括缓冲期消息的SEI nalu所激活。 同一个IDR图象的序列参数集有相同的seq_parameter_set_id，直到一个图象的最后一个access unit或者包括缓冲期消息的SEI Nalu，这时需要出现下一个图象的序列参数集。下一个图象的序列参数集被SEI nalu激活。如果序列参数集和图象参数集是通过其他传输管道发送的，则要保证以上的传输顺序。 H.264视频流是以NAL单元传送的。。。但在一个NAL单元里面，可能既存放I-Slice（P-Slice或B-Slice），同时也可能存放图像的其他信息那么 是不是说 I frame， P frame，B frame是把收到的NAL单元中的VCL的信息先提取出，然后按内容进行I、P、B frame分类？ 而我们只能通过NAL nal_unit_type来判别NAL单元中数据的类型哈~~~ 呵呵 不好意思 还没有完全理解~~ NAL单元中首先会有一个H.264 NAL type，根据这个可以判断是啥信息。如果是H264NT_SLICE_DPA,H264NT_SLICE_DPB,H264NT_SLICE_DPC, H264NT_SLICE_IDR视频数据相关的，里面还会有Slice head头信息，根据这个头信息，可以判断属于I-Slice（P-Slice或B-Slice），之后对于每个宏块，都会有MB head 信息，根据宏块头信息可以判断块模式。 H264就是这样以分层的方式组织信息的。不知道你理解没有。","categories":[{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/categories/video/"}],"tags":[{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/tags/video/"},{"name":"h.264","slug":"h-264","permalink":"http://www.yaosansi.com/tags/h-264/"},{"name":"frame","slug":"frame","permalink":"http://www.yaosansi.com/tags/frame/"}]},{"title":"H.264视频文件转换成TS","slug":"h264-video-mp4-to-ts","date":"2012-09-04T15:38:51.000Z","updated":"2017-12-30T16:05:31.007Z","comments":true,"path":"post/h264-video-mp4-to-ts/","link":"","permalink":"http://www.yaosansi.com/post/h264-video-mp4-to-ts/","excerpt":"","text":"本文最后更新于：2012-09-04 23:38:51原文：http://www.yaosansi.com/post/h264-video-mp4-to-ts Mp4 To TS 使用ffmpeg 1ffmpeg -i &quot;test.mp4&quot; -i &quot;test.aac&quot; -f mpegts -vcodec copy -acodec copy -vbsf h264_mp4toannexb -y test.ts 如果不使用-vbsf h264_mp4toannexb ，将出现如下提示： 1[mpegts @ 0x61c040] h264 bitstream malformated, no startcode found, use -vbsf h264_mp4toannexb av_interleaved_write_frame(): Operation not permitted 使用vlc 1vlc -vvv --extraintf=logger test.mp4 :sout=#std&#123;access=file,mux=ts,dst=test.ts&#125; 合并MP41ffmpeg -i 1.mp4 -sameq 1.mpg ffmpeg -i 2.mp4 -sameq 2.mpg cat 1.mpg 2.mpg | ffmpeg -f mpeg -i - -sameq -vcodec mpeg4 output.mp4 或 1ffmpeg -i concat:&quot;video1.mp4|video2.mp4&quot; ###当然也可以使用 mp4box 分割或合并MP4 分割： 123MP4Box -split time_sec foo.mp4 #按照时长切割MP4文件MP4Box -split-size size foo.mp4 #按照文件大小切割MP4文件，单位是KBMP4Box -split-chunk S:E foo.mp4 #切出视频中指定时间的一段 合并： 1234#这样就合并了，要求编码参数一致MP4Box -cat foo1.mp4 -cat foo2.mp4 -new foo.mp4 MP4Box -force-cat foo1.mp4 -force-cat foo2.mp4 -new foo.mp4 #强制合并，有可能合出来看不了MP4Box -add video1.264 -cat video2.264 -cat video3.264 -add audio1.aac -cat audio2.aac -cat audio3.aac -new muxed.mp4 -fps 24 加版权信息： 1MP4Box -cprt sinav foo.mp4 TS To Mp4123ffmpeg -i input.ts -c:v copy -c:a libfaac out.mp4ffmpeg -i input.ts -c:v libx264 -crf 24 -c:a libfaac out.mp4Set CRF to anything between 19 and 25, or even more. The more, the worse the quality, but the smaller the file size. 部分引用：http://blog.yikuyiku.com/?p=1854","categories":[{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/categories/video/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"http://www.yaosansi.com/tags/ffmpeg/"}]},{"title":"Windows&Linux文件合并","slug":"how-to-combine-files-on-windows-and-linux","date":"2012-09-04T06:31:47.000Z","updated":"2017-12-30T15:58:28.137Z","comments":true,"path":"post/how-to-combine-files-on-windows-and-linux/","link":"","permalink":"http://www.yaosansi.com/post/how-to-combine-files-on-windows-and-linux/","excerpt":"","text":"本文最后更新于：2015-06-04 14:31:47原文：http://www.yaosansi.com/post/how-to-combine-files-on-windows-and-linux/ WINDOWS1格式：copy /b ＜filename1＞+＜filename2＞+…+＜filenameN＞ ＜filename＞ 使用方法：假设你有两个文件分别是stream1.ts 和 stream2.ts 那么我们在该目录下输入“copy /b stream1.ts+stream2.ts stream.ts”就可以了，其中stream.ts是你合并后生成的新文件名。 当然，windows也可以使用type命令： 1格式：type file1 file2 &gt; file3 Linux在Linux下同样也能实现文件合并，用“cat”命令就能实现。 1格式：cat stream1.ts stream2.ts ＞ stream.ts FFmpeg以上方法仅适合TS等文件信息保存中文件各个片段的视频格式。而对于文件信息在文件特定部位（如文件头）等视频，直接使用上述方法只是把文件强制的合并到了一起，甚至不能正常播放。 使用ffmpeg的concat可以实现简单的流文件合并功能 1ffmpeg -i &quot;concat:01.ts|02.ts&quot; -c copy -y cat.ts 也可以使用文件列表，将需要拼接的视频文件按以下格式保存在一个列表 list.txt 中： 1234# this is a commentfile &apos;/path/to/file1&apos;file &apos;/path/to/file2&apos;file &apos;/path/to/file3&apos; 1ffmpeg -f concat -i mylist.txt -c copy output 自动生产文件列表 (将目录中所有.wav文件输出到mylist.txt中)1234# with a bash for loopfor f in ./*.wav; do echo &quot;file &apos;$f&apos;&quot; &gt;&gt; mylist.txt; done# or with printfprintf &quot;file &apos;%s&apos;\\n&quot; ./*.wav &gt; mylist.txt 注意：FFmpeg由于只是重新封装，并不会对文件进行重新的编解码，所以速度非常快并且是无损的，但并不意味着适用所有场景。 Shell脚本合并相同编码文件1234567891011121314151617181920212223242526272829303132#!/bin/bash#cut/join videos using ffmpeg without quality lossif [ -z $1 ] || [ -z $2 ]; then echo &quot;Usage:$0 c[ut] seconds &lt;File&gt;&quot; echo &quot; eg. $0 c 10 80 example.mp4&quot; echo &quot; eg. $0 c 00:00:10 00:01:20 example.mp4&quot; echo &quot;Usage:$0 j[oin] &lt;FileType&gt;&quot; echo &quot; eg. $0 j avi&quot; exitficase &quot;$1&quot; in c) echo &quot;cuttig video...&quot; fileName=$(echo $4 | cut -f 1 -d &apos;.&apos;) fileType=$(echo $4 | cut -f 2 -d &apos;.&apos;) ffmpeg -i $4 -ss $2 -t $3 -acodec copy -vcodec copy $fileName-$2-$3.$fileType ;; j) echo &quot;joinning videos...&quot; rm temp_list.txt for f in ./*.$2; do echo &quot;file &apos;$f&apos;&quot; &gt;&gt; temp_list.txt; done printf &quot;file &apos;%s&apos;\\n&quot; ./*.$2 &gt; temp_list.txt ffmpeg -f concat -i temp_list.txt -c copy output.$2 rm temp_list.txt ;; *) echo &quot;wrong arguments&quot; ;;esacexit 合并不同编码文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#!/bin/bash ################################################################################## Script name: MultiMedia Concat Script (mmcat)# Author: burek (burek021@gmail.com)# License: GNU/GPL, see http://www.gnu.org/copyleft/gpl.html# Date: 2012-07-14## This script concatenates (joins, merges) several audio/video inputs into one# final output (just like as if all the inputs were played in a playlist, one# after another).## All input files must have at least one audio and at least one video stream.# If not, you can easily add audio silence, using FFmpeg. Just search the# internet for &quot;ffmpeg add silence&quot;.## The script makes use of FFmpeg tool (www.ffmpeg.org) and is free for use under# the GPL license. The inspiration for this script came from this FAQ item:# http://ffmpeg.org/faq.html#How-can-I-join-video-files_003f## If you find any bugs, please send me an e-mail so I can fix it.################################################################################### General syntax: mmcat &lt;input1&gt; &lt;input2&gt; &lt;input3&gt; ... &lt;output&gt;## For example: mmcat file1.flv file2.flv output.flv# would create &quot;output.flv&quot; out of &quot;file1.flv&quot; and &quot;file2.flv&quot;.################################################################################# # change this to what you need !!!EXTRA_OPTIONS=&apos;-vcodec libx264 -crf 23 -preset medium -acodec aac -strict experimental -ac 2 -ar 44100 -ab 128k&apos; ################################################################################## NO NEED TO TOUCH ANYTHING AFTER THIS LINE!################################################################################# # the version of the scriptVERSION=1.3 # location of temp folderTMP=/tmp ################################################################################ echo &quot;MultiMedia Concat Script v$VERSION (mmcat) - A script to concatenate multiple multimedia files.&quot;echo &quot;Based on FFmpeg - www.ffmpeg.org&quot;echo &quot;Don&apos;t forget to edit this script and change EXTRA_OPTIONS&quot;echo &quot;&quot; ################################################################################# syntax check (has to have at least 3 params: infile1, infile2, outfile################################################################################if [ -z $3 ]; then echo &quot;Syntax: $0 &lt;input1&gt; &lt;input2&gt; &lt;input3&gt; ... &lt;output&gt;&quot; exit 1fi ################################################################################# get all the command line parameters, except for the last one, which is output################################################################################# $first - first parameter# $last - last parameter (output file)# $inputs - all the inputs, except the first input, because 1st input is# handled separately################################################################################first=$&#123;@:1:1&#125;last=$&#123;@:$#:1&#125;len=$(($#-2))inputs=$&#123;@:2:$len&#125; # remove all previous tmp fifos (if exist)rm -f $TMP/mcs_* ################################################################################# decode first input differently, because the video header does not have to be# kept for each video input, only the header from the first video is needed################################################################################mkfifo $TMP/mcs_a1 $TMP/mcs_v1 ffmpeg -y -i $first -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a1 2&gt;/dev/null &lt;/dev/null &amp;ffmpeg -y -i $first -an -f yuv4mpegpipe -vcodec rawvideo $TMP/mcs_v1 2&gt;/dev/null &lt;/dev/null &amp; # if you need to log the output of decoding processes (usually not necessary)# then replace the &quot;2&gt;/dev/null&quot; in 2 lines above with your log file names, like this:#ffmpeg -y -i $first -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a1 2&gt;$TMP/log.a.1 &lt;/dev/null &amp;#ffmpeg -y -i $first -an -f yuv4mpegpipe -vcodec rawvideo $TMP/mcs_v1 2&gt;$TMP/log.v.1 &lt;/dev/null &amp; ################################################################################# decode all the other inputs, remove first line of video (header) with tail# $all_a and $all_v are lists of all a/v fifos, to be used by &quot;cat&quot; later on################################################################################all_a=$TMP/mcs_a1all_v=$TMP/mcs_v1i=2for f in $inputsdo mkfifo $TMP/mcs_a$i $TMP/mcs_v$i ffmpeg -y -i $f -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a$i 2&gt;/dev/null &lt;/dev/null &amp; &#123; ffmpeg -y -i $f -an -f yuv4mpegpipe -vcodec rawvideo - 2&gt;/dev/null &lt;/dev/null | tail -n +2 &gt; $TMP/mcs_v$i ; &#125; &amp; # if you need to log the output of decoding processes (usually not necessary) # then replace the &quot;2&gt;/dev/null&quot; in 2 lines above with your log file names, like this: #ffmpeg -y -i $f -vn -f u16le -acodec pcm_s16le -ac 2 -ar 44100 $TMP/mcs_a$i 2&gt;$TMP/log.a.$i &lt;/dev/null &amp; #&#123; ffmpeg -y -i $f -an -f yuv4mpegpipe -vcodec rawvideo - 2&gt;$TMP/log.v.$i &lt;/dev/null | tail -n +2 &gt; $TMP/mcs_v$i ; &#125; &amp; all_a=&quot;$all_a $TMP/mcs_a$i&quot; all_v=&quot;$all_v $TMP/mcs_v$i&quot; let i++done ################################################################################# concatenate all raw audio/video inputs into one audio/video################################################################################mkfifo $TMP/mcs_a_allmkfifo $TMP/mcs_v_allcat $all_a &gt; $TMP/mcs_a_all &amp;cat $all_v &gt; $TMP/mcs_v_all &amp; ################################################################################# finally, encode the raw concatenated audio/video into something useful################################################################################ffmpeg -f u16le -acodec pcm_s16le -ac 2 -ar 44100 -i $TMP/mcs_a_all \\ -f yuv4mpegpipe -vcodec rawvideo -i $TMP/mcs_v_all \\ $EXTRA_OPTIONS \\ $last ################################################################################# remove all fifos################################################################################rm -f $TMP/mcs_* 参考： http://trac.ffmpeg.org/wiki/Concatenate https://ffmpeg.org/ffmpeg.html#Stream-copy http://segmentfault.com/a/1190000000414341 https://gist.github.com/imcaspar/8771268 https://gist.github.com/imcaspar/8778002","categories":[{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/categories/video/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"http://www.yaosansi.com/tags/ffmpeg/"}]},{"title":"批处理和Shell中获取当前路径","slug":"get-path-from-bat-and-shell","date":"2012-09-04T06:00:19.000Z","updated":"2017-12-30T15:58:04.490Z","comments":true,"path":"post/get-path-from-bat-and-shell/","link":"","permalink":"http://www.yaosansi.com/post/get-path-from-bat-and-shell/","excerpt":"","text":"批处理1234567@echo off echo 当前盘符：%~d0 echo 当前盘符和路径：%~dp0 echo 当前批处理全路径：%~f0 echo 当前盘符和路径的短文件名格式：%~sdp0 echo 当前CMD默认目录：%cd% pause ###dos环境下获取完整路径中的文件名 要从一个完整的路径，比如/a/b/c/d/name.txt中获得其中的name.txt字段，其实只需要用到call 或for 命令独有的参数解析功能即可。我自己用的是call命令，如下所示：1234Rem:full_name是完整路径，name是所要提取的文件名字段 call :getname %full_name :getname set name=%~n1 看上去非常简单，对于call和for命令而言，可以将输入给它们的参数做一些特殊的解析。对该功能的演示有更好的例子：123456789101112@ECHO OFF SET/P FILEPATH=请输入你的完整路径: if not defined FILEPATH goto :EOF for,/f,&quot;tokens=*&quot;,%%i,in,(%FILEPATH%),do,( set a=%%~di set b=%%~pi set c=%%~nxi ) echo %a% echo %b% echo %c% pause 该批处理例子示范了如何从一个输入的完整路径名，分别取得盘符、目录和文件名。 Shell1.basename1basename `pwd` 2.echo You can use parameter substitution with the ${var##pattern} syntax, which removes from $var the longest part of $Pattern that matches the front end of $var. Take a look at an example:1echo $&#123;PWD##*/&#125; 3.awkA more elaborate solution uses a combination of awk (a pattern-scanning utility) and rev (a utility that reverses lines from a file or from stdin): 123cd /usr/share/cups/datapwd | rev | awk –F \\/ &apos;&#123;print $1&#125;&apos; | revdata It’s a lot easier to understand this kind of script step by step:12345678pwd/usr/share/cups/datapwd | rev atad/supc/erahs/rsu/pwd | rev | awk –F \\/ &apos;&#123;print $1&#125;&apos;atadpwd | rev | awk –F \\/ &apos;&#123;print $1&#125;&apos; | revdata The -F option indicates that you should separate by fields, where the field delimiter is /, and that you should print field 1. 4.sedFinally, you can parse pwd output in the stream editor sed using an elaborate regular expression. This approach may be educational, but it’s not practical:123cd /home/smith/musicpwd | sed &apos;s,^\\(.*/\\)\\?\\([^/]*\\),\\2,&apos;music For a better understanding of how this works, remove the escape character (), which is required for special characters such as “(“: 1sed &apos;s,^(.*/)?([^/]*),\\2,&apos; s substitutes one string for another. It looks for two patterns, which are indicated between the first comma and the second comma. The first pattern (^(./)?) searches from the beginning of the line (^) until the last occurrence that it finds of / (in the example, it matches /home/smith/). The second pattern (([^/])) searches everything from the last pattern except the / character , which is indicated by [^/]*, where ^ at the beginning of the square brackets means not. This results in both /home/smith/ and music. The second part of this regular expression is the substitution, indicated by \\2. In sed, this is called a back reference. As its name implies, it goes back and recalls a previously used reference. There may be nine of these, named \\1, \\2, \\3, and so on. In the example, \\2 refers to the second pattern found, which is music – the result expected. As you can see, Linux gives you many ways to find a directory name. Having many choices for the same chore is one of its strengths. Sergio Gonzalez Duran is a Linux administrator, systems developer, and network security counselor who also teaches Linux courses and publishes the Spanish-oriented Linux and open source Web site linuxtotal.com.mx.","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"http://www.yaosansi.com/tags/shell/"},{"name":"bat","slug":"bat","permalink":"http://www.yaosansi.com/tags/bat/"}]},{"title":"常用的视频音频编辑脚本命令（mencoder/ffmpeg等)","slug":"video-and-audio-editing-script-commands","date":"2012-09-04T04:36:16.000Z","updated":"2017-12-30T16:02:37.282Z","comments":true,"path":"post/video-and-audio-editing-script-commands/","link":"","permalink":"http://www.yaosansi.com/post/video-and-audio-editing-script-commands/","excerpt":"","text":"原文：http://blog.sina.com.cn/s/blog_648dbb7c0100h69j.html 任务1： 延迟视频部分 （对avi文件有效）1mencoder -delay 0.7 -oac copy -ovc copy input.avi -o output.avi 解释：让视频轨比当前的音频轨落后0.7秒钟 任务2： 延迟音频部分（对avi文件有效）1mencoder -oac copy -ovc copy -audio-delay -0.7 input.avi -o output.avi 解释：让音频轨比当前的视频轨落后0.7秒钟 任务3：切割视频轨1mencoder -ss 00:00:10 -endpos 60 -ovc copy -oac copy input.avi -o output.avi 解释：切割视频部分，从0分10秒开始，到1分10秒，时间长度为60秒。将结果存储为output.avi 任务4： 连接两段视频 （必须比特率相同）1mencoder -oac copy -ovc copy -idx -o output.avi input1.avi input2.avi 解释： 任务5： 将一系列静止图像和一个mp3文件转换为AVI视频文件123mencoder &quot;mf://snap*.bmp&quot; -mf fps=25 -oac mp3lame -lameopts abr:br=128:mode=3 -audiofile test.mp3 -ovc lavc -lavcopts vcodec=msmpeg4v2:vpass=1:vbitrate=2560000:mbd=2:keyint=132:vqblur=1.0:cmp=2:subcmp=2:dia=2:mv0:last_pred=3 -o leadnull mencoder &quot;mf://snap*.bmp&quot; -mf fps=25 -oac mp3lame -lameopts abr:br=128:mode=3 -audiofile test.mp3 -ovc lavc -lavcopts vcodec=msmpeg4v2:vpass=2:vbitrate=2560000:mbd=2:keyint=132:vqblur=1.0:cmp=2:subcmp=2:dia=2:mv0:last_pred=3 -o lead.avi 解释：mono=3 代表单声道音频输出， mono=0 代表立体声音频输出。上面使用的视频编码是微软的msmpeg4，因此这个AVI文件可以直接在Windows media player中播放，不需要另外安装插件。 上面两条命令，表示两遍压缩。 为提高速度，也可以只实用第一条做单次压缩。输出视频的fps为25。 任务6： 切割mp3音频文件1234mplayer -ss 00:01:59 -endpos 102.5 input.mp3 -ao pcm sox audiodump.wav result1.wav fade t 3 sox result1.wav result2.wav fade t 0 102.5 3.5 lame result2.wav -o fighting.mp3 -b 160 解释：这个过程由四条命令组成。 上面的例子中， 第一步：切割部分为 1分59秒开始，到3分41.5秒结束，长度102.5秒。用户需自己计算切割部分，设定上述参数。 第二步：用sox对音频开头3秒钟做一个淡入效果（声音逐渐增强） 第三步：用sox对音频结束3.5秒钟做一个淡出效果（声音逐渐衰减） 第四步：将lame处理好的音频重新编码成160kbps的mp3文件 其中，第二、第三步是可以省略的。 任务7： 将wma文件转换为mp3文件12mplayer input.wma -ao pcm lame audiodump.wav -o output.mp3 -b 160 解释：一共两条命令。第一条将wma转化为wav文件，第二条再将wav转换为mp3文件，比特率为160kbps. 任务8： 将一系列图像文件转换为flv视频文件123mencoder &quot;mf://snap*.bmp&quot; -mf fps=25 -audiofile test.mp3 -o output.flv -af resample=22050:0:0 -sws 9 -vf scale=448:-3,expand=448:336 -of lavf -ovc lavc -lavcopts vcodec=flv:vbitrate=260:mbd=2:mv0:trell:v4mv:cbp:last_pred=3:predia=2:dia=2:vb_strategy=1:precmp=2:cmp=2:subcmp=2:preme=2:vpass=1mencoder &quot;mf://snap*.bmp&quot; -mf fps=25 -o output.flv -audiofile test.mp3 -af resample=22050:0:0 -sws 9 -vf scale=448:-3,expand=448:336 -of lavf -ovc lavc -lavcopts vcodec=flv:vbitrate=260:mbd=2:mv0:trell:v4mv:cbp:last_pred=3:predia=2:dia=2:vb_strategy=1:precmp=2:cmp=2:subcmp=2:preme=2:qns=2:vpass=2 解释：两遍压缩，将一系列snap001.bmp, snap002.bmp, …图像和一个mp3文件”test.mp3”转换成fps=25的录像。音频采样率设定为22050，视频画面大小为448x336, 视频的比特率为260kbps。 如果你希望更改视频中的keyframe, 你可以在第一条命令执行后，手动编辑一个divx2pass.log文件。文件中”Type:1”表示关键帧keyframe (或者叫i frame), “Type:2”表示p-frame,就是只记录相邻帧变化部分的帧。 任务9： 将一系列图像文件转换为ogg视频文件1ffmpeg2theora -f image2 snap%05d.bmp -V 320 -o output.ogg 解释：ogg录像还是有点用的，wikipedia, wikimeida都在用。上面的视频比特率为320kbps 任务10： 将一系列图像转化为与NTSC DVD兼容的mpeg2格式文件。123mencoder -oac lavc -ovc lavc -of mpeg -mpegopts format=dvd:tsaf -vf scale=720:480,harddup -srate 48000 -af lavcresample=48000 -lavcopts vcodec=mpeg2video:vpass=1:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=18:vstrict=0:acodec=ac3:abitrate=192:aspect=16/9 -ofps 30000/1001 -o ntscdvd.mpg &quot;mf://snap*.bmp&quot; -mf fps=25 -audiofile test.mp3 mencoder -oac lavc -ovc lavc -of mpeg -mpegopts format=dvd:tsaf -vf scale=720:480,harddup -srate 48000 -af lavcresample=48000 -lavcopts vcodec=mpeg2video:vpass=2:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=18:vstrict=0:acodec=ac3:abitrate=192:aspect=16/9 -ofps 30000/1001 -o ntscdvd.mpg &quot;mf://snap*.bmp&quot; -mf fps=25 -audiofile test.mp3 解释：两遍压缩，输入图像帧率为25fps, 输出帧率为29.97fps,视频编码mpeg2, 音频编码192kbps ac3. 任务11： 将一系列图像文件转换为与PAL DVD兼容的mpeg2格式视频文件123mencoder -oac lavc -ovc lavc -of mpeg -mpegopts format=dvd:tsaf -vf scale=720:576,harddup -srate 48000 -af lavcresample=48000 -lavcopts vcodec=mpeg2video:vpass=1:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=15:vstrict=0:acodec=ac3:abitrate=192:aspect=16/9 -ofps 25 -o paldvd.mpg &quot;mf://snap*.bmp&quot; -mf fps=25 -audiofile test.mp3 mencoder -oac lavc -ovc lavc -of mpeg -mpegopts format=dvd:tsaf -vf scale=720:576,harddup -srate 48000 -af lavcresample=48000 -lavcopts vcodec=mpeg2video:vpass=2:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=15:vstrict=0:acodec=ac3:abitrate=192:aspect=16/9 -ofps 25 -o paldvd.mpg &quot;mf://snap*.bmp&quot; -mf fps=25 -audiofile test.mp3 解释：两遍压缩，输入为snap001.jpg, snap002.jpg… 和test.mp3,图像系列的fps为25， 输出视频文件的fps为25. 视频编码为mpeg2, 音频编码为192kbps ac3. 任务12： 将视频文件转换为一系列图像用ffmpeg命令如下1ffmpeg -i test.avi snap%05d.bmp 也可以用mplayer完成同样功能1mplayer video.avi -vo png -ss 00:00:10 -endpos 5.0 -vf crop=480:360:80:60 解释：这里mplayer的例子中，还提供了额外的切割选择功能。切割的部分从0分10秒开始，到0分15秒结束，长达5秒。同时画面也被切割，切割的位置从坐标(80,60)开始，宽度480像素，高度360像素。这里坐标系以屏幕左上角为(0,0). 任务13： 将midi文件转换为mp3文件12timidity input.mid -Ow lame -b 160 -h -k input.wav output.mp3 解释：第一条命令使用timidity将midi转换为wav文件，第二条命令用lame将wav转换为160kbps mp3文件。 timidity配置和安装还是比较麻烦的。还需要额外安装高品质的sf2声音字体文件，配置sf2文件也异常容易出错。总体效果还可以接受。但无法使用目前流行的vst，因此可能会被慢慢淘汰掉。 任务14： 将一系列图像转换为swf格式的flash文件（需要perl)1flv2swf input.flv output.swf 解释：有时候可能用swf来保存视频比flv更方便。如果图像数量不多的话，可以采用swftools来进行转换 如果图像数量很多的话，首先我们用任务8中的命令将图像转换为一个flv文件。然后我们可以用adobe的各种软件很轻松的将flv录像加入一个flash项目里，最后输出为swf. 如果你熟悉perl的话，也可以用一个perl脚本将flv文件转换成swf. CPAN(Perl公共模块库）有一个FLV::info的模块，安装后就可以使用flv2swf命令了。 任务15： 将mp3文件转换为wma文件12mplayer input.mp3 -ao pcm ffmpeg -i audiodump.wav -acodec wmav2 -ab 128000 test.wma1 解释：偶尔也需要这个功能的。第一步，将mp3文件转换为wav文件，第二步用ffmpeg将wav文件转换为wma. 参考链接上述命令基本上是参考了mplayer的用户手册，videohelp.com的论坛帖子写的。 http://www.mplayerhq.hu/DOCS/HTML/en/encoding-guide.html http://forum.videohelp.com/ mencoder的Windows binary: http://oss.netfarm.it/mplayer-win32.php ffmpeg的Windows binary: http://ffmpeg.arrozcru.org/builds/ lame的Windows binary: http://lame.sourceforge.net/links.php sox: http://sox.sourceforge.net/ ffmpeg2theora: http://v2v.cc/~j/ffmpeg2theora/ cpan: http://search.cpan.org/dist/FLV-Info/ Active perl的Windows版本：http://www.activestate.com/activeperl/ 上述软件被广泛使用，其源代码部分没有什么问题, 但因为专利和版权的问题，公布其Windows的二进制可执行文件则可能触犯了一些国家的法律，目前合法性这个问题还比较模糊。","categories":[{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/categories/video/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"http://www.yaosansi.com/tags/ffmpeg/"},{"name":"video","slug":"video","permalink":"http://www.yaosansi.com/tags/video/"},{"name":"mencoder","slug":"mencoder","permalink":"http://www.yaosansi.com/tags/mencoder/"}]},{"title":"Python三目运算，and or陷阱及相应的解决办法","slug":"python-operator-and-or","date":"2011-07-26T06:06:58.000Z","updated":"2017-12-30T16:01:52.138Z","comments":true,"path":"post/python-operator-and-or/","link":"","permalink":"http://www.yaosansi.com/post/python-operator-and-or/","excerpt":"","text":"原文：http://hi.baidu.com/tuuboo/blog/item/0945d3fc2c4fbe43d6887dbb.html 在C语言中，三目运算经常用到（cond?a:b），非常的简洁，而在Python中不支持这种语法。但是，可以用Python中and or来实现（这里是有陷阱的，下面会讲到）我们来看下面几个表达式123456789101112&gt;&gt;&gt; False or 11&gt;&gt;&gt; False or 00&gt;&gt;&gt; True or 0True&gt;&gt;&gt; True and 11&gt;&gt;&gt;True and 00&gt;&gt;&gt; False and 1False 也就是说，and or这个表达式会返回一个最终的表达式结果，而不是简单的True或者False。那么看如下几个表达式：1234&gt;&gt;&gt; True and 1 or 2 #TRUE?1:2 1&gt;&gt;&gt; False and 1 or 2 #TRUE?1:2 2 这是不是很像三目运算的结果呢？这里你也许会想到文章开始的三目表达式可以这样表示1&gt;&gt;&gt; cond and a or b 是的，在大多数情况下这个表达式都是正确的，但是上面提到的陷阱也在这里出现了12&gt;&gt;&gt; cond, a, b = True, 0, 1 #这样赋值后 &gt;&gt;&gt; cond and a or b #这个表达式的结果会是什么呢？ 1 #也就是b，而不是你预想的a这是因为，在 and or运算中 空字符串 ‘’，数字0，空列表[]，空字典{}，空()，None，在逻辑运算中都被当作假来处理，如下面这个例子12&gt;&gt;&gt; &apos;sss&apos; and &apos;&apos; or &apos;bbb&apos; &apos;bbb&apos; 但是，不要担心，还是有办法的。在的文章《和C语言三目运算符完全等价的表达式》中给出了如下表达方式1&gt;&gt;&gt; c = cond and a or (not cond or a) or b #貌似有点太复杂了 在Dive into Python 中给出这样一个方法：1&gt;&gt;&gt; (1 and [a] or [b])[0] #也就是 (cond and [a] or [b])[0] 因为，即使 a或者b为一个逻辑假的值，将他放入集合中后，就为假了，也就是[False] [None]都不为假。 此外，我认为还可以这样实现1&gt;&gt;&gt; (b, a)[cond and 1 or 0] #这种方法需要主意的地方就是，Tuble中a和b的位置是颠倒的 另，在“深圳夜归人”的文章里给出了，用dict的一种方式1&gt;&gt;&gt; max_ab = &#123;True:a, False:b&#125;[a &gt; b] 但是这种方法没有普适性，因为cond的取值不一定为True False 所以建议使用Dive into Python的方法，或者我的方法.","categories":[{"name":"python","slug":"python","permalink":"http://www.yaosansi.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.yaosansi.com/tags/python/"},{"name":"三目运算","slug":"三目运算","permalink":"http://www.yaosansi.com/tags/三目运算/"}]},{"title":"使用signtool与Verisign SPC和PVK在命令行下对EXE等文件进行数字签名","slug":"how-to-sign-exe-using-signtool-on-the-command","date":"2010-07-26T06:20:54.000Z","updated":"2017-12-30T15:59:05.518Z","comments":true,"path":"post/how-to-sign-exe-using-signtool-on-the-command/","link":"","permalink":"http://www.yaosansi.com/post/how-to-sign-exe-using-signtool-on-the-command/","excerpt":"","text":"How to sign EXE using signtool with Verisign SPC and PVK on the command line？ run “signtool signwizard” to start the signing wizard. File Selection: Choose the EXE you wish to sign (ie, yaosansi.com.exe) Signing Options: Choose “Custom” Signature Certificate: Click “Select from File” and choose “mycredentials.spc” Private Key: Select “Private key file on disk” and choose “myprivatekey.pvk” Leave CSP at “Microsoft Strong Cryptographic Provider” Leave Provider Type at “RSA FULL” Private Key Password: Enter “xxxxxxxxxx” Hash Algorithm: Leave it at ‘sha1’ Additional Certificates: Leave it at “All certificates in the certification path, including the root” Leave it at “No additional certificates” Data Description: Enter the following: Description:yaosansi.com Web Location: http://www.yaosansi.com Digital Signature Wizard: Enable “Add a timestamp to the data” Timestamp service URL: http://timestamp.verisign.com/scripts/timstamp.dll这里还有两个免费的时间戳服务器 a.http://timestamp.wosign.com/timestampb.http://timestamp.comodoca.com/authenticode Note: This enables the signature to work forever; not sure what this means but the Verisign guy was pretty excited about it Review and click OK Enter private key password: Enter “xxxxxxxxxxx” Done!","categories":[],"tags":[{"name":"signtool","slug":"signtool","permalink":"http://www.yaosansi.com/tags/signtool/"},{"name":"数字签名","slug":"数字签名","permalink":"http://www.yaosansi.com/tags/数字签名/"}]},{"title":"C#中向process发送ctrl-c事件[控制台程序]","slug":"csharp-how-to-send-a-ctrol-c-signal-programmatically-to-a-process","date":"2010-05-25T09:49:08.000Z","updated":"2017-12-30T15:56:52.086Z","comments":true,"path":"post/csharp-how-to-send-a-ctrol-c-signal-programmatically-to-a-process/","link":"","permalink":"http://www.yaosansi.com/post/csharp-how-to-send-a-ctrol-c-signal-programmatically-to-a-process/","excerpt":"","text":"Win32应用程序主要有两种类型:控制台应用程序(Console)和窗体程序(Winform)，他们使用不同的方式处理应用程序退出。 要强制窗体程序(Winform)退出，你需要发送WM_CLOSE消息到主窗口句柄。.NET中可以使用Application.ApplicationExit或Form.Close。 在控制台应用程序，这点有所不同。控制台应用程序有点模仿DOS控制台应用程序，通常是在应用程序退出时，进程（命令）执行结束或Ctrl - C被按下。 在C＃中，可以使用代理（委托）SetConsoleCtrlHandler 来实现。 代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697using System;using System.Threading;using System.Runtime.InteropServices;// A simple class that exposes two static Win32 functions.// One is a delegate type and the other is an enumerated type.public class MyWin32&#123; // Declare the SetConsoleCtrlHandler function // as external and receiving a delegate. [DllImport(\"Kernel32\")] public static extern Boolean SetConsoleCtrlHandler(HandlerRoutine Handler, Boolean Add); // A delegate type to be used as the handler routine // for SetConsoleCtrlHandler. public delegate Boolean HandlerRoutine(CtrlTypes CtrlType); // An enumerated type for the control messages // sent to the handler routine. public enum CtrlTypes &#123; CTRL_C_EVENT = 0, CTRL_BREAK_EVENT, CTRL_CLOSE_EVENT, CTRL_LOGOFF_EVENT = 5, CTRL_SHUTDOWN_EVENT &#125;&#125;public class MyApp&#123; // A private static handler function in the MyApp class. static Boolean Handler(MyWin32.CtrlTypes CtrlType) &#123; String message = \"This message should never be seen!\"; // A switch to handle the event type. switch (CtrlType) &#123; case MyWin32.CtrlTypes.CTRL_C_EVENT: message = \"A CTRL_C_EVENT was raised by the user.\"; break; case MyWin32.CtrlTypes.CTRL_BREAK_EVENT: message = \"A CTRL_BREAK_EVENT was raised by the user.\"; break; case MyWin32.CtrlTypes.CTRL_CLOSE_EVENT: message = \"A CTRL_CLOSE_EVENT was raised by the user.\"; break; case MyWin32.CtrlTypes.CTRL_LOGOFF_EVENT: message = \"A CTRL_LOGOFF_EVENT was raised by the user.\"; break; case MyWin32.CtrlTypes.CTRL_SHUTDOWN_EVENT: message = \"A CTRL_SHUTDOWN_EVENT was raised by the user.\"; break; &#125; // Use interop to display a message for the type of event. Console.WriteLine(message); return true; &#125; public static void Main() &#123; // Use interop to set a console control handler. MyWin32.HandlerRoutine hr = new MyWin32.HandlerRoutine(Handler); MyWin32.SetConsoleCtrlHandler(hr, true); // Give the user some time to raise a few events. Console.WriteLine(\"Waiting 30 seconds for console ctrl events...\"); // The object hr is not referred to again. // The garbage collector can detect that the object has no // more managed references and might clean it up here while // the unmanaged SetConsoleCtrlHandler method is still using it. // Force a garbage collection to demonstrate how the hr // object will be handled. GC.Collect(); GC.WaitForPendingFinalizers(); GC.Collect(); Thread.Sleep(30000); // Display a message to the console when the unmanaged method // has finished its work. Console.WriteLine(\"Finished!\"); // Call GC.KeepAlive(hr) at this point to maintain a reference to hr. // This will prevent the garbage collector from collecting the // object during the execution of the SetConsoleCtrlHandler method. GC.KeepAlive(hr); Console.Read(); &#125;&#125; 参考：http://msdn.microsoft.com/en-us/library/s50zac30(vs.71).aspx","categories":[{"name":"csharp","slug":"csharp","permalink":"http://www.yaosansi.com/categories/csharp/"}],"tags":[{"name":"c#","slug":"c","permalink":"http://www.yaosansi.com/tags/c/"},{"name":"console","slug":"console","permalink":"http://www.yaosansi.com/tags/console/"},{"name":"ctrl-c","slug":"ctrl-c","permalink":"http://www.yaosansi.com/tags/ctrl-c/"},{"name":"process","slug":"process","permalink":"http://www.yaosansi.com/tags/process/"}]},{"title":"how to use mstsclib","slug":"how-to-use-mstsclib","date":"2009-07-21T09:38:36.000Z","updated":"2017-12-30T15:59:17.299Z","comments":true,"path":"post/how-to-use-mstsclib/","link":"","permalink":"http://www.yaosansi.com/post/how-to-use-mstsclib/","excerpt":"","text":"use AxImp /source c:\\windows\\system32\\MSTSC.dll to generate the source code of AxMSTSCLib.dll(AxMSTSCLib.cs), then you can include it in your project, thus you do not need AxMSTSCLib.dll. what’s more, you can even remove MSTSCLib.dll by manually defining the interface classes. First of all, I would like to confirm my understanding of your issue. Fromyour description, I understand that when you have drag and drop a TerminalServices Control on a windows form, a compiler error was generated. Ifthere is any misunderstanding, please feel free to let me know.Based on my research, this is a known issue. The wrapper generater fails togenerate correct method for returning an enum value. Here is a workaround. md c:\\temp cd c:\\temp %&lt;SDK bin directory&gt;%\\aximp.exe %windir%\\system32\\mstscax.dll This will generate MSTSCLib.dll and AxMSTSCLib.dll.Make sure Interop.MSTSCLib.dll and AxInterop.MSTSCLib.dll have been deletedin the obj and bin\\Debug directories. Copy the generated files (without renaming) - MSTSCLib.dll andAxMSTSCLib.dll into the project’s obj directory. In the project’s references, add MSTSCLib.dll and AxMSTSCLib.dll fromthe obj directories. Now, instead of drag-drop’ing the control from the toolbox, write codeto add the control: Goto Form.cs code view Declare:123456789101112131415161718private AxMSTSCLib.AxMsTscAx axMsTscAx1; In InitializeComponent: this.axMsTscAx1 = new AxMSTSCLib.AxMsTscAx(); ((System.ComponentModel.ISupportInitialize)(this.axMsTscAx1)).BeginInit(); // // axMsTscAx1 // this.axMsTscAx1.Enabled = true; this.axMsTscAx1.Location = new System.Drawing.Point(58, 17); this.axMsTscAx1.Name = \"axMsTscAx1\" this.axMsTscAx1.OcxState = ((System.Windows.Forms.AxHost.State)(resources.GetObject(\"axMsTscAx1.OcxStat e\"))); this.axMsTscAx1.Size = new System.Drawing.Size(192, 192); this.axMsTscAx1.TabIndex = 1; .... this.Controls.Add(this.axMsTscAx1); ((System.ComponentModel.ISupportInitialize)(this.axMsTscAx1)).EndInit();","categories":[{"name":"csharp","slug":"csharp","permalink":"http://www.yaosansi.com/categories/csharp/"}],"tags":[{"name":"c#","slug":"c","permalink":"http://www.yaosansi.com/tags/c/"},{"name":"mstsc","slug":"mstsc","permalink":"http://www.yaosansi.com/tags/mstsc/"}]},{"title":"目前比较全面的浏览器css bug兼容汇总","slug":"css-bug-summary-for-browser-compatibility","date":"2009-03-25T09:11:16.000Z","updated":"2017-12-30T15:57:19.300Z","comments":true,"path":"post/css-bug-summary-for-browser-compatibility/","link":"","permalink":"http://www.yaosansi.com/post/css-bug-summary-for-browser-compatibility/","excerpt":"","text":"从网上收集了IE7,6与Fireofx的兼容性处理方法并整理了一下. 对于web2.0的过度,请尽量用xhtml格式写代码,而且DOCTYPE 影响 CSS 处理,作为W3C的标准,一定要加 DOCTYPE声明. 其它请参考:CSS hack：针对IE6，IE7，firefox显示不同效果 ##1.div的垂直居中问题1vertical-align:middle; 将行距增加到和整个DIV一样高 line-height:200px;然后插入文字，就垂直居中了。缺点是要控制内容不要换行。 ##2. margin加倍的问题设置为float的div在ie下设置的margin会加倍。这是一个ie6都存在的bug。解决方案是在这个div里面加上display:inline;例如： &lt;#div id=&quot;imfloat&quot;&gt; 相应的css为12345#IamFloat &#123; float:left; margin:5px;/*IE下理解为10px*/ display:inline;/*IE下再理解为5px*/ &#125; ##3.浮动ie产生的双倍距离 12345#box&#123; float:left; width:100px; margin:0 0 0 100px; //这种情况之下IE会产生200px的距离display:inline; //使浮动忽略 &#125; 这里细说一下block与inline两个元素：block元素的特点是,总是在新行上开始,高度,宽度,行高,边距都可以控制(块元素);Inline元素的特点是,和其他元素在同一行上,不可控制(内嵌元素);123456#box &#123; display:block; //可以为内嵌元素模拟为块元素 display:inline; //实现同一行排列的效果 diplay:table; &#125; ##4 IE与宽度和高度的问题IE 不认得min-这个定义，但实际上它把正常的width和height当作有min的情况来使。这样问题就大了，如果只用宽度和高度，正常的浏览器里这两个值就不会变，如果只用min-width和min-height的话，IE下面根本等于没有设置宽度和高度。比如要设置背景图片，这个宽度是比较重要的。要解决这个问题，可以这样：12345#box&#123; width: 80px; height: 35px;&#125; html&gt;body #box &#123; width: auto; height: auto; min-width: 80px; min-height: 35px; &#125; 5.页面的最小宽度min -width是个非常方便的CSS命令，它可以指定元素最小也不能小于某个宽度，这样就能保证排版一直正确。但IE不认得这个，而它实际上把width当做最小宽度来使。为了让这一命令在IE上也能用，可以把一个 放到 标签下，然后为div指定一个类, 然后CSS这样设计：1234#container&#123; min-width: 600px; width:e-xpression(document.body.clientWidth &lt; 600? \"600px\": \"auto\" );&#125; 第一个min-width是正常的；但第2行的width使用了Javascript，这只有IE才认得，这也会让你的HTML文档不太正规。它实际上通过Javascript的判断来实现最小宽度。 6.DIV浮动IE文本产生3象素的bug左边对象浮动，右边采用外补丁的左边距来定位，右边对象内的文本会离左边有3px的间距. 12345678#box&#123; float:left; width:800px;&#125; #left&#123; float:left; width:50%;&#125; #right&#123; width:50%;&#125; *html #left&#123; margin-right:-3px; //这句是关键&#125; &lt;div id=\"box\"&gt; &lt;div id=\"left\"&gt;&lt;/div&gt; &lt;div id=\"right\"&gt;&lt;/div&gt; &lt;/div&gt; 7.IE捉迷藏的问题当div应用复杂的时候每个栏中又有一些链接，DIV等这个时候容易发生捉迷藏的问题。有些内容显示不出来，当鼠标选择这个区域是发现内容确实在页面。解决办法：对#layout使用line-height属性 或者给#layout使用固定高和宽。页面结构尽量简单。 8.float的div闭合;清除浮动;自适应高度;① 例如：&lt;#div id=”floatA” &gt;&lt;#div id=”floatB” &gt;&lt;#div id=” NOTfloatC” &gt;这里的NOTfloatC并不希望继续平移，而是希望往下排。(其中floatA、floatB的属性已经设置为 float:left;) 这段代码在IE中毫无问题，问题出在FF。原因是NOTfloatC并非float标签，必须将float标签闭合。在 &lt;#div class=”floatB”&gt; &lt;#div class=”NOTfloatC”&gt;之间加上 &lt; #div class=”clear”&gt;这个div一定要注意位置，而且必须与两个具有float属性的div同级，之间不能存在嵌套关系，否则会产生异常。 并且将clear这种样式定义为为如下即可：.clear{ clear:both;}作为外部 wrapper 的 div 不要定死高度为了让高度能自动适应，要在wrapper里面加上overflow:hidden; 当包含float的 box的时候，高度自动适应在IE下无效，这时候应该触发IE的layout私有属性(万恶的IE啊！)用zoom:1;可以做到，这样就达到了兼容。例如某一个wrapper如下定义：1.colwrapper&#123; overflow:hidden; zoom:1; margin:5px auto;&#125; 9.对于排版我们用得最多的css描述可能就是float:left.有的时候我们需要在n栏的float div后面做一个统一的背景,譬如:12345&lt;div id=\"page\"&gt; &lt;div id=\"left\"&gt;&lt;/div&gt; &lt;div id=\"center\"&gt;&lt;/div&gt; &lt;div id=\"right\"&gt;&lt;/div&gt; &lt;/div&gt; 比如我们要将page的背景设置成蓝色,以达到所有三栏的背景颜色是蓝色的目的,但是我们会发现随着left center right的向下拉长,而 page居然保存高度不变,问题来了,原因在于page不是float属性,而我们的page由于要居中,不能设置成float,所以我们应该这样解决: 1234567&lt;div id=\"page\"&gt; &lt;div id=\"bg\" style=\"float:left;width:100%\"&gt; &lt;div id=\"left\"&gt;&lt;/div&gt; &lt;div id=\"center\"&gt;&lt;/div&gt; &lt;div id=\"right\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 再嵌入一个float left而宽度是100%的DIV解决之 10.万能float 闭合(非常重要!)关于 clear float 的原理可参见 [How To Clear Floats Without Structural Markup],将以下代码加入Global CSS 中,给需要闭合的div加上 class=”clearfix” 即可,屡试不爽. 1234567/* Clear Fix */ .clearfix:after &#123; content:\".\"; display:block; height:0; clear:both; visibility:hidden; &#125; .clearfix &#123; display:inline-block; &#125; /* Hide from IE Mac */ .clearfix &#123;display:block;&#125; /* End hide from IE Mac */ /* end of clearfix */ 或者这样设置： 1.hackbox&#123; display:table; //将对象作为块元素级的表格显示&#125; 11.高度不适应高度不适应是当内层对象的高度发生变化时外层高度不能自动进行调节，特别是当内层对象使用margin 或paddign 时。例：12345#box &#123;background-color:#eee; &#125; #box p &#123;margin-top: 20px;margin-bottom: 20px; text-align:center; &#125; &lt;div id=\"box\"&gt; &lt;p&gt;p对象中的内容&lt;/p&gt; &lt;/div&gt; 解决方法：在P对象上下各加2个空的div对象CSS代码：1.1&#123;height:0px;overflow:hidden;&#125;或者为DIV加上border属性。 12 .IE6下为什么图片下有空隙产生解决这个BUG的方法也有很多,可以是改变html的排版,或者设置 img 为display:block或者设置 vertical-align 属性为 vertical-align:top | bottom |middle |text-bottom 都可以解决. 13.如何对齐文本与文本输入框加上 vertical-align:middle;12345&lt;style type=\"text/css\"&gt; &lt;!-- input &#123;width:200px; height:30px;border:1px solid red;vertical-align:middle; &#125; --&gt; &lt;/style&gt; 14.web标准中定义id与class有什么区别吗?一.web标准中是不容许重复ID的,比如 div id=”aa” 不容许重复2次,而class 定义的是类,理论上可以无限重复, 这样需要多次引用的定义便可以使用他.二.属性的优先级问题 ID 的优先级要高于class,看上面的例子三.方便JS等客户端脚本,如果在页面中要对某个对象进行脚本操作,那么可以给他定义一个ID,否则只能利用遍历页面元素加上指定特定属性来找到它,这是相对浪费时间资源,远远不如一个ID来得简单. 15. LI中内容超过长度后以省略号显示的方法此方法适用与IE与OP浏览器1234567891011&lt;style type=\"text/css\"&gt; &lt;!-- li &#123; width:200px; white-space:nowrap; text-overflow:ellipsis; -o-text-overflow:ellipsis; overflow: hidden; &#125; --&gt; &lt;/style&gt; 16.为什么web标准中IE无法设置滚动条颜色了解决办法是将body换成html123456789101112131415&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /&gt; &lt;style type=\"text/css\"&gt; &lt;!-- html &#123; scrollbar-face-color:#f6f6f6; scrollbar-highlight-color:#fff; scrollbar-shadow-color:#eeeeee; scrollbar-3dlight-color:#eeeeee; scrollbar-arrow-color:#000; scrollbar-track-color:#fff; scrollbar-darkshadow-color:#fff; &#125; --&gt; &lt;/style&gt; 17.为什么无法定义1px左右高度的容器IE6下这个问题是因为默认的行高造成的,解决的方法也有很多例如:overflow:hidden | zoom:0.08 | line-height:1px 18.怎么样才能让层显示在FLASH之上呢解决的办法是给FLASH设置透明1&lt;param name=\"wmode\" value=\"transparent\" /&gt; 19.怎样使一个层垂直居中于浏览器中这里我们使用百分比绝对定位,与外补丁负值的方法,负值的大小为其自身宽度高度除以21234567891011121314&lt;style type=\"text/css\"&gt; &lt;!— div &#123; position:absolute; top:50%; lef:50%; margin:-100px 0 0 -100px; width:200px; height:200px; border:1px solid red; &#125; --&gt; &lt;/style&gt; FF与IE1. Div居中问题div设置 margin-left, margin-right 为 auto 时已经居中，IE 不行，IE需要设定body居中，首先在父级元素定义text-algin: center;这个的意思就是在父级元素内的内容居中。 2.链接(a标签)的边框与背景a 链接加边框和背景色，需设置 display: block, 同时设置 float: left 保证不换行。参照 menubar, 给 a 和 menubar 设置高度是为了避免底边显示错位,若不设 height, 可以在 menubar 中插入一个空格。 3.超链接访问过后hover样式就不出现的问题被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序: L-V-H-ACode:12345678&lt;style type=\"text/css\"&gt; &lt;!-- a:link &#123;&#125; a:visited &#123;&#125; a:hover &#123;&#125; a:active &#123;&#125; --&gt; &lt;/style&gt; 4. 游标手指cursorcursor: pointer 可以同时在 IE FF 中显示游标手指状，hand 仅 IE 可以 5.UL的padding与marginul标签在FF中默认是有padding值的,而在IE中只有margin默认有值,所以先定义 ul{margin:0;padding:0;}就能解决大部分问题 6. FORM标签这个标签在IE中,将会自动margin一些边距,而在FF中margin则是0,因此,如果想显示一致,所以最好在css中指定margin和 padding,针对上面两个问题,我的css中一般首先都使用这样的样式ul,form{margin:0;padding:0;}给定义死了,所以后面就不会为这个头疼了. 7. BOX模型解释不一致问题在FF和IE 中的BOX模型解释不一致导致相差2px解决方法：1div&#123;margin:30px!important;margin:28px;&#125; 注意这两个 margin的顺序一定不能写反， important这个属性IE不能识别，但别的浏览器可以识别。所以在IE下其实解释成这样：div {maring:30px;margin:28px}重复定义的话按照最后一个来执行，所以不可以只写margin:xx px!important;123456789#box &#123; width:600px; //for ie6.0\\ - w\\idth:500px; //for ff+ie6.0&#125; #box&#123; width:600px!important //for ff width:600px; //for ff+ie6.0 width /**/:500px; //for ie6.0-&#125; 8.属性选择器(这个不能算是兼容,是隐藏css的一个bug)p[id]{}div[id]{}这个对于IE6.0和IE6.0以下的版本都隐藏,FF和OPera作用.属性选择器和子选择器还是有区别的,子选择器的范围从形式来说缩小了,属性选择器的范围比较大,如p[id]中,所有p标签中有id的都是同样式的. 9.最狠的手段 - !important;如果实在没有办法解决一些细节问题,可以用这个方法.FF对于”!important”会自动优先解析,然而IE则会忽略.如下1234.tabd1 &#123; background:url(/res/images/up/tab1.gif) no-repeat 0px 0px !important; /*Style for FF*/ background:url(/res/images/up/tab1.gif) no-repeat 1px 0px; /* Style for IE */&#125; 值得注意的是，一定要将xxxx !important 这句放置在另一句之上，上面已经提过 10.IE,FF的默认值问题或许你一直在抱怨为什么要专门为IE和FF写不同的CSS，为什么IE这样让人头疼，然后一边写css，一边咒骂那个可恶的M$ IE.其实对于css的标准支持方面，IE并没有我们想象的那么可恶，关键在于IE和FF的默认值不一样而已，掌握了这个技巧，你会发现写出兼容FF和IE的css并不是那么困难，或许对于简单的css，你完全可以不用”!important”这个东西了。我们都知道，浏览器在显示网页的时候，都会根据网页的 css样式表来决定如何显示，但是我们在样式表中未必会将所有的元素都进行了具体的描述，当然也没有必要那么做，所以对于那些没有描述的属性，浏览器将采用内置默认的方式来进行显示，譬如文字，如果你没有在css中指定颜色，那么浏览器将采用黑色或者系统颜色来显示，div或者其他元素的背景，如果在 css中没有被指定，浏览器则将其设置为白色或者透明，等等其他未定义的样式均如此。所以有很多东西出现FF和IE显示不一样的根本原因在于它们的默认显示不一样，而这个默认样式该如何显示我知道在w3中有没有对应的标准来进行规定，因此对于这点也就别去怪罪IE了。 11.为什么FF下文本无法撑开容器的高度标准浏览器中固定高度值的容器是不会象IE6里那样被撑开的,那我又想固定高度,又想能被撑开需要怎样设置呢？办法就是去掉height设置min-height:200px;这里为了照顾不认识min-height的IE6可以这样定义:1&#123; height:auto!important; height:200px; min-height:200px; &#125; 12.FireFox下如何使连续长字段自动换行众所周知IE中直接使用 word-wrap:break-word 就可以了,FF中我们使用JS插入的方法来解决1234567891011121314151617181920212223242526272829&lt;style type=\"text/css\"&gt; &lt;!-- div &#123; width:300px; word-wrap:break-word; border:1px solid red; &#125; --&gt; &lt;/style&gt; &lt;div id=\"ff\"&gt;这里是一行很长的文字aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/div&gt; &lt;scrīpt type=\"text/javascrīpt\"&gt; /* &lt;![CDATA[ */ function toBreakWord(el, intLen) &#123; var ōbj=document.getElementById(el); var strContent=obj.innerHTML; var strTemp=\"\"; while(strContent.length&gt;intLen) &#123; strTemp+=strContent.substr(0,intLen)+\" \"; strContent=strContent.substr(intLen,strContent.length); &#125; strTemp+=\" \"+strContent; obj.innerHTML=strTemp; &#125; if(document.getElementById &amp;&amp; !document.all) toBreakWord(\"ff\", 37); /* ]]&gt; */ &lt;/scrīpt&gt; 13.为什么IE6下容器的宽度和FF解释不同呢123456789101112131415&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt; &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /&gt; &lt;style type=\"text/css\"&gt; &lt;!--div &#123; cursor:pointer; width:200px; height:200px; border:10px solid red &#125; --&gt; &lt;/style&gt; &lt;div ōnclick=\"alert(this.offsetWidth)\"&gt;让FireFox与IE兼容&lt;/div&gt; 问题的差别在于容器的整体宽度有没有将边框（border）的宽度算在其内,这里IE6解释为200PX ,而FF则解释为220PX,那究竟是怎么导致的问题呢？大家把容器顶部的xml去掉就会发现原来问题出在这,顶部的申明触发了IE的qurks mode,关于qurks mode、 standards mode的相关知识,请参考:http: //www.microsoft.com/china/msdn/library/webservices/asp.net/ ASPNETusStan.mspx?mfr=true IE6,IE7,FFIE7.0 出来了，对CSS的支持又有新问题。浏览器多了，网页兼容性更差了，疲于奔命的还是我们 ，为解决IE7.0的兼容问题，找来了下面这篇文章： 现在我大部分都是用!important来hack，对于ie6和firefox测试可以正常显示，但是ie7对!important可以正确解释，会导致页面没按要求显示！ 下面是三个浏览器的兼容性收集.第一种，是CSS HACK的方法123height:20px; /*For Firefox*/ *height:25px; /*For IE7 &amp; IE6*/ _height:20px; /*For IE6*/ 注意顺序。 这样也属于CSS HACK，不过没有上面这样简洁。123#example &#123; color: #333; &#125; /* Moz */ * html #example &#123; color: #666; &#125; /* IE6 */ *+html #example &#123; color: #999; &#125; /* IE7 */ 第二种,条件注释123456789&lt;!--其他浏览器 –&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css.css\" /&gt; &lt;!--[if IE 7]&gt; &lt;!-- 适合于IE7 –&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"ie7.css\" /&gt; &lt;![endif]—&gt; &lt;!--[if lte IE 6]&gt; &lt;!-- 适合于IE6及一下 –&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"ie.css\" /&gt; &lt;![endif]—&gt; 第三种，css filter的办法，以下为经典从国外网站翻译过来的。新建一个css样式如下：123456#item &#123; width: 200px; height: 200px; background: red; &#125; 新建一个div,并使用前面定义的css的样式：1&lt;div id=\"item\"&gt;some text here&lt;/div&gt; 在body表现这里加入lang属性,中文为zh：1&lt;body lang=\"en\"&gt; 现在对div元素再定义一个样式：1*:lang(en) #item&#123; background:green !important;&#125; 这样做是为了用!important覆盖原来的css样式,由于:lang选择器ie7.0并不支持,所以对这句话不会有任何作用,于是也达到了ie6.0下同样的效果,但是很不幸地的是,safari同样不支持此属性,所以需要加入以下css样式：1#item:empty &#123;background: green !important &#125; :empty选择器为css3的规范,尽管safari并不支持此规范,但是还是会选择此元素,不管是否此元素存在,现在绿色会现在在除ie各版本以外的浏览器上。对IE6和FF的兼容可以考虑以前的!important 个人比较喜欢用第一种，简洁，兼容性比较好。","categories":[{"name":"css","slug":"css","permalink":"http://www.yaosansi.com/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://www.yaosansi.com/tags/css/"},{"name":"bug","slug":"bug","permalink":"http://www.yaosansi.com/tags/bug/"}]},{"title":"下载nVelocity视图模板引擎的注意事项","slug":"note-for-download-nVelocity","date":"2009-03-05T06:14:17.000Z","updated":"2017-12-30T16:01:16.516Z","comments":true,"path":"post/note-for-download-nVelocity/","link":"","permalink":"http://www.yaosansi.com/post/note-for-download-nVelocity/","excerpt":"","text":"为什么要使用nVelocity 模板引擎？（引自：http://www.cnblogs.com/mike108mvp/archive/2008/07/20/1247082.html） 首先，nVelocity是从Java Apache Software Foundation的 Velocity项目引入到.NET framework版本的。 如果你正在将一个现在的Java 应用程序迁移到.NET平台中，并且该程序使用了Velocity模板引擎，那么使用 nVelocity 模板引擎能够让这个迁移过程更顺利。 其次，与ASP.NET Web Forms的语法相比较而言，你可能更喜欢nVelocity模板引擎的语法。Velocity 模板引擎语言是专门为了创建HTML页面而设计的。Velocity提供给你一个非常干净的语法来实现通用操作，例如循环一批数据库记录，并把每条记录显示在一个HTML页面中（可以认为是HTML领域专用的语言）。 ##下载注意事项： 一、不要使用http://nvelocity.sourceforge.net/中的nVelocity 程序集。如果你在搜索引擎中搜索nVelocity，这个是搜索结果的第一项。遗憾的是，这个项目自从2003以来还没有被更新过，并且这里的nVelocity已经严重过时了。新的nvelocity是由castle小组接手的，你应该使用Castle项目中的nVelocity 程序集。 二、下载并解压Castle项目（建议从此页面下载最新版本：http://www.castleproject.org/castle/download.html） 目前最新文件下载地址（2009-03-05）： Installer version: CastleProject-1.0-RC3.msiBinaries:.net Framework 2.0 debug: Castle-net-2.0-debug-2007-9-20.zip.net Framework 2.0 release: Castle-net-2.0-release-2007-9-20.zipSource code: Castle-SourceCode.zipAPI Documentation (CHM): Castle-ChmHelp.rar 三、解压下载后的文件（如：Castle-net-2.0-release-2007-9-20.zip），导航到bin目录，解压external-dependencies.zip文件。这个文件包含了nVelocity.dll程序集。","categories":[{"name":"csharp","slug":"csharp","permalink":"http://www.yaosansi.com/categories/csharp/"}],"tags":[{"name":"nvelocity","slug":"nvelocity","permalink":"http://www.yaosansi.com/tags/nvelocity/"},{"name":"模板","slug":"模板","permalink":"http://www.yaosansi.com/tags/模板/"}]},{"title":"SQL Server 2008 修改安装路径后安装出错的解决方法","slug":"sqlserver-2008-install-error-when-change-install-path","date":"2008-11-25T09:01:23.000Z","updated":"2017-12-30T16:02:13.427Z","comments":true,"path":"post/sqlserver-2008-install-error-when-change-install-path/","link":"","permalink":"http://www.yaosansi.com/post/sqlserver-2008-install-error-when-change-install-path/","excerpt":"","text":"本文最后更新于：2008-11-25 17:01:23原文：http://www.yaosansi.com/post/sqlserver-2008-install-error-when-change-install-path/ 1、安装时如果修改安装路径后报错 例如想把“C:\\Program Files\\Microsoft SQL Server” 修改为“D:\\Program Files\\Microsoft SQL Server” 错误的详细信息是：&quot;The INSTANCESHAREDWOWDIR command line value was not specified. This value must be specified when the INSTANCESHAREDDIR value is specified.&quot; 这篇Post回答了这个问题：http://forums.microsoft.com/TechNet/ShowPost.aspx?PostID=3736253&amp;SiteID=17 翻译过来就是：第一种方法不修改路径，使用默认方式安装，最后在确认安装时会显示ConfigurationFile.ini文件的路径，到这个路径下面将安装配置文件复制到其他路径，例如D:\\，然后退出安装 其次：使用记事本打开这个文件，根据实际需求将“C:\\Program Files\\Microsoft SQL Server” 查找替换为“D:\\Program Files\\Microsoft SQL Server”后保存 最后：在命令行转到安装目录，开始安装，如果是Vista，记得使用管理员权限运行命令行，输入以下指令： 1setup.exe /action=Install /configurationfile=D:\\ConfigurationFile.ini 第二种方法2、插入光盘后不要用autorun的安装，使用命令行安装！cd进安装光盘的根目录，输入命令：1setup.exe /INSTALLSHAREDDIR=&quot;D:\\\\Program Files\\\\Microsoft SQL Server\\\\&quot; /INSTALLSHAREDWOWDIR=&quot;D:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\&quot; 安装即可，其中INSTALLSHAREDDIR为x64部件安装的路径，INSTALLSHAREDWOWDIR为x32部件安装的路径。 切记不可使用默认的setup.exe就安装的方式，一旦进入安装完支持文件之后，就算你退出安装程序，运行上面的命令语句也无法改变安装路径！如果已经安装了支持文件，你可以在控制面板尝试卸载清光SQL Server的任何有关项，但并不保证一定能行。 （究其原因，我怀疑是微软在安装时先要复制安装支持文件，而这时使用的是默认的路径，因为之前根本没有设置路径这项。一旦完成就无法改变安装路径，不然会和支持文件的路径冲突，因此只能一条黑道走到底，而命令行安装时先指定路径，其实就是指定了复制支持文件的路径。）","categories":[{"name":"database","slug":"database","permalink":"http://www.yaosansi.com/categories/database/"}],"tags":[{"name":"sql server","slug":"sql-server","permalink":"http://www.yaosansi.com/tags/sql-server/"}]},{"title":"windows 2008 update 更新时出现 80072EE2 错误","slug":"windows-2008-update-error-80072ee2","date":"2008-07-24T05:44:08.000Z","updated":"2017-12-30T16:03:01.442Z","comments":true,"path":"post/windows-2008-update-error-80072ee2/","link":"","permalink":"http://www.yaosansi.com/post/windows-2008-update-error-80072ee2/","excerpt":"","text":"本文最后更新于：2008-07-24 13:44:08原文：http://www.yaosansi.com/post/windows-2008-update-error-80072ee2/ 今天在使用windows 2008 update 更新时出现错误80072EE2,此系统是我在4月份做的GHOST备份，今天还原了一下，更新了一些软件,结果出现不能升级的问题。 解决方案一: Windows Update 错误 80072ee2 如果在检查更新时收到 Windows Update 错误 80072ee2，可能需要将 Windows Update 下载更新的网站地址添加到防火墙例外或“允许”列表中。 将 Windows Update 网站添加到防火墙例外列表12345Windows 防火墙是该版本 Windows 附带的防火墙，其例外列表中应当已包括这些站点。如果使用其他防火墙，请参阅软件发行者的帮助，查看如何将这些网站添加到防火墙例外列表中：http://*.update.microsoft.com https://*.update.microsoft.com http://download.windowsupdate.com 这个是常见问题,假如这个不能解决,很可能在于你的第三方杀毒软件,或者第三方防火墙把它禁止了,请在里面允许这个地址 由于使用系统防火墙，没有安装其它防火墙，杀毒软件（NOD32）也用了几年了，从没发现问题。以上解决方案被排除。 因为使用2008将近一年了，从来没有遇到过此情况，况且是正版的系统。GOOGLE了一下,得出 解决方案二:找到C:\\Windows\\SoftwareDistribution文件夹下，补丁下载目录Download文件夹及临时安装文件目录DataStore，把这两个文件夹里的东西全部清空（注意要到安全模式才行呀；或者禁用 Windows Update服务，重启后删除，删除文件后再打开Windows Update服务。切忌，两种发放删除文件后，都必须重新启动），然后让更新重0开始，哈哈，结果搜索到补丁，下载补丁，安装成功。 原因分析：123451.补丁下载时出错，可能是下载补丁时突然网络中断导致下载的文件损坏，而从新搜索到补丁时，不能继传，也就不能继续下载，所以补丁会一直停留在21%不动！2.根据我更新的补丁失败及创建时间，在C:\\Windows\\SoftwareDistribution\\Download文件夹里找到的补丁号不是KB9155971，而是另外一个补丁，那这也就是说，补丁下载出错，下载的补丁不是我需要的补丁，所有在更新补丁时，大部分时间是出错，偶尔提示不需要此更新！综上所述，如果大家遇到补丁下载到一定进度而又不能继续下载或者补丁更新时一直出错，不妨试一下以上的方法，但是要注意一点，可能C:\\Windows\\SoftwareDistribution\\Download文件夹里又安装补丁前创造的还原点，如果你很在意这个，请先备份后在删除！ 解决方案三:由于我使用的是英文操作系统，在网上无意搜索时发现有人提出IE的语言顺序会导致Windows Update 错误，于是打开IE，找到languages选项，果然只有Chinese一种语言，增加English语言，并将其置顶，再次尝试Windows Update 成功。 现在还不得而知是安装什么软件改变了IE默认的语言，按我的经验判断，很有可能是灵格词霸2.5.0 。","categories":[{"name":"windows","slug":"windows","permalink":"http://www.yaosansi.com/categories/windows/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://www.yaosansi.com/tags/windows/"},{"name":"update","slug":"update","permalink":"http://www.yaosansi.com/tags/update/"}]},{"title":"Windows 2008远程桌面多用户登陆的配置方法","slug":"windows-2008-remote-desktop-configuration-of-multiple-user-login-methods","date":"2008-02-16T06:28:37.000Z","updated":"2017-12-30T16:02:51.573Z","comments":true,"path":"post/windows-2008-remote-desktop-configuration-of-multiple-user-login-methods/","link":"","permalink":"http://www.yaosansi.com/post/windows-2008-remote-desktop-configuration-of-multiple-user-login-methods/","excerpt":"","text":"开启远程桌面后，Windows Vista（或Windows 2008）下默认只支持一个administrator用户登陆，一个登录后另一个就被踢掉了，下面提供允许同一个用户名同时多个用户登录的配置方法（是pcbeta论坛的skyskai的方法）： 首先要启用远程桌面这一功能：右击“我的电脑”→ 属性 → 远程配置 → 远程桌面，就可以配置相应的远程桌面功能了。下面是配置多用户登陆的方法： 打开 控制面板 → 管理工具 → 终端服务（Terminal Services） → 终端服务配置（Terminal Services Configuration） 1、（修改可以同时登陆的人数，包括自己，默认为2个，如果只需要另外一个人远程登陆你的电脑的话，比如mm或gg，那么这一步就不用做了，直接跳到第二步）连接（Connections）：RDP-tcp 点右键 → 属性 → 网络适配器（Network Adapter） → 最大连接数 → 自己修改数目。 2、配置（Edit settings）：终端服务器授权模式（Terminal Services licensing mode） → 点右键 → 属性 → 常规 → 限制每个用户只能使用一个会话（Restrict each user to a single session），去掉前面的勾 → 确定。到这里就可以多用户登录了。如果设置没有生效，重启一下（试过了，生效d）。 3、为防止恶搞，阻止远程用户终止控制台管理员。开始 → 运行 → gpedit.msc → 计算机配置 → 管理模板 → Windows组件（Windows Components） → 终端服务（Terminal Services） → 终端服务器（Terminal Server） → 连接（Connections） → 拒绝将已经登录到控制台会话的管理员注销（Deny logoff of an administrator logged in to the console session），右击 → 属性 → 启用。（重启生效）","categories":[{"name":"windows","slug":"windows","permalink":"http://www.yaosansi.com/categories/windows/"}],"tags":[{"name":"mstsc","slug":"mstsc","permalink":"http://www.yaosansi.com/tags/mstsc/"},{"name":"远程桌面","slug":"远程桌面","permalink":"http://www.yaosansi.com/tags/远程桌面/"},{"name":"多用户","slug":"多用户","permalink":"http://www.yaosansi.com/tags/多用户/"}]},{"title":"IIS7配置ASP+Access使用环境","slug":"asp-and-access-config-in-iis7","date":"2008-01-12T09:44:50.000Z","updated":"2017-12-30T15:56:06.420Z","comments":true,"path":"post/asp-and-access-config-in-iis7/","link":"","permalink":"http://www.yaosansi.com/post/asp-and-access-config-in-iis7/","excerpt":"","text":"默认装完IIS7之后，使用ASP程序会发现提示数据库连接失败，在网上找了找，说是因为MS Jet引擎改变了临时目录的位置，但是又没有对临时的存取权限，导致数据库使用失败。 先要设置应用程序池(Application Pool)为Classic .NET AppPool， 不是默认的Default AppPool，可以在网站目录里对每个站点设置，也可以在站点进行单独设置。选择好要设置的站点之后，点右边的“基本设置”即可调出应用程序池设置对话框。 然后再给“系统盘:\\Windows\\ServiceProfiles\\NetworkService\\AppData\\Local\\Temp”目录添加一个“Authenticated Users”的用户 其中AppData目录是隐藏的，在进入的时候可以直接在地址栏输入路径，或者在文件夹选项里显示隐藏文件。 设置权限步骤：右击Temp文件夹，选择“属性”》选择“安全”选项卡》单击“编辑”》出来“Temp 的权限”对话框，单击“添加”，在下面的“输入对象名称来选择”中输入Authenticated Users，确定》返回到“Temp 的权限”，将Authenticated Users的权限中的完全控制给勾上，确定》确定。","categories":[{"name":"web","slug":"web","permalink":"http://www.yaosansi.com/categories/web/"}],"tags":[{"name":"iis","slug":"iis","permalink":"http://www.yaosansi.com/tags/iis/"}]},{"title":"IIS7的备份与恢复","slug":"iis7-backup-and-restore","date":"2008-01-12T08:43:44.000Z","updated":"2017-12-30T15:59:34.461Z","comments":true,"path":"post/iis7-backup-and-restore/","link":"","permalink":"http://www.yaosansi.com/post/iis7-backup-and-restore/","excerpt":"","text":"在%systemdrive%\\windows\\system32\\inetsrv\\下应该有个工具–Appcmd.exe，我们将使用该工具进行IIS7的备份及恢复。 备份 AppCmd Add Backup “BackupName” 罗列备份 AppCmd List Backup 恢复 AppCmd Restore Backup “BackupName”","categories":[{"name":"web","slug":"web","permalink":"http://www.yaosansi.com/categories/web/"}],"tags":[{"name":"iis","slug":"iis","permalink":"http://www.yaosansi.com/tags/iis/"},{"name":"备份","slug":"备份","permalink":"http://www.yaosansi.com/tags/备份/"}]},{"title":"阿里云短信服务接口.Net Core轻量版","slug":"aliyun-openapi-sdk-lite-net-core","date":"2008-01-11T17:16:50.000Z","updated":"2018-01-11T17:29:44.751Z","comments":true,"path":"post/aliyun-openapi-sdk-lite-net-core/","link":"","permalink":"http://www.yaosansi.com/post/aliyun-openapi-sdk-lite-net-core/","excerpt":"","text":"前言项目环境使用 .NET Core 2.0，由于阿里云官方SDK目前（2018-01-12）版本尚未支持 .NET Core 环境，github 找到 aliyun-openapi-sdk-net-core，经测试使用的SDK已是旧版本，无法正常工作了。 阿里云官方SDK回复下个版本支持 .NET Core 环境。 说明由于并未阅读官方接口文档，本项目主要参考阿里云官方PHPSDK轻量版，改写为 .NET Core 2.0 版本，经测试运行正常，其中加密等方法均参考官方SDK。（详见参考和引用部分） 环境要求 支持 .Net Core 2.0 及以上版本； 直接复制代码文件即可，或自行改为单文件版本。 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/// &lt;summary&gt;/// 阿里云短信/// https://www.aliyun.com/product/sms?spm=5176.8142029.388261.321.3836dbccTHaG24/// &lt;/summary&gt;public class AliyunSms&#123; public static string SendSms() &#123; // *** 需用户填写部分 *** //fixme 必填: 请参阅 https://ak-console.aliyun.com/ 取得您的AK信息 string accessKeyId = &quot;your access key id&quot;;//你的accessKeyId，参考本文档步骤2 string accessKeySecret = &quot;your access key secret&quot;;//你的accessKeySecret，参考本文档步骤2 Dictionary&lt;string, string&gt; smsDict = new Dictionary&lt;string, string&gt;(); //fixme 必填: 短信接收号码 smsDict.Add(&quot;PhoneNumbers&quot;, &quot;17000000000&quot;); //fixme 必填: 短信签名，应严格按&quot;签名名称&quot;填写，请参考: https://dysms.console.aliyun.com/dysms.htm#/develop/sign smsDict.Add(&quot;SignName&quot;, &quot;短信签名&quot;); //fixme 必填: 短信模板Code，应严格按&quot;模板CODE&quot;填写, 请参考: https://dysms.console.aliyun.com/dysms.htm#/develop/template smsDict.Add(&quot;TemplateCode&quot;, &quot;SMS_0000001&quot;); // fixme 可选: 设置模板参数, 假如模板中存在变量需要替换则为必填项 smsDict.Add(&quot;TemplateParam&quot;, JsonConvert.SerializeObject(new &#123; code = &quot;12345&quot;, product = &quot;阿里云短信&quot; &#125;)); //什么？Newtonsoft.Json也觉得重，那拼字符串好了 //smsDict.Add(&quot;TemplateParam&quot;, &quot;&#123;\\&quot;appname\\&quot;:\\&quot;微关爱\\&quot;,\\&quot;appstorename\\&quot;:\\&quot;小黑\\&quot;&#125;&quot;); // *** 以下内容无需修改 *** smsDict.Add(&quot;RegionId&quot;, &quot;cn-hangzhou&quot;); smsDict.Add(&quot;Action&quot;, &quot;SendSms&quot;); smsDict.Add(&quot;Version&quot;, &quot;2017-05-25&quot;); string domain = &quot;dysmsapi.aliyuncs.com&quot;;//短信API产品域名（接口地址固定，无需修改） // 初始化SignatureHelper实例用于设置参数，签名以及发送请求 var singnature = new SignatureHelper(); return singnature.Request(accessKeyId, accessKeySecret, domain, smsDict); &#125; 项目源码 阿里云短信服务接口.Net Core轻量版 参考和引用 阿里云API调用签名机制 阿里云官方.NET SDK Open API SDK for .Net Core developers 阿里云官方PHPSDK轻量版 Authorsyaosansi Licenselicensed under the Apache License 2.0","categories":[{"name":"阿里云","slug":"阿里云","permalink":"http://www.yaosansi.com/categories/阿里云/"}],"tags":[{"name":"阿里云","slug":"阿里云","permalink":"http://www.yaosansi.com/tags/阿里云/"},{"name":".netcore","slug":"netcore","permalink":"http://www.yaosansi.com/tags/netcore/"},{"name":"短信","slug":"短信","permalink":"http://www.yaosansi.com/tags/短信/"}]},{"title":"C#获取文件md5值","slug":"get-file-md5-in-csharp","date":"2007-08-26T06:34:10.000Z","updated":"2017-12-30T15:57:55.241Z","comments":true,"path":"post/get-file-md5-in-csharp/","link":"","permalink":"http://www.yaosansi.com/post/get-file-md5-in-csharp/","excerpt":"","text":"1234567891011121314151617181920212223242526class md5&#123; /// &lt;summary&gt; /// 实现对一个文件md5的读取，path为文件路径 /// &lt;/summary&gt; /// &lt;param name=\"path\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public string md5_hash(string path) &#123; try &#123; FileStream get_file = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read); System.Security.Cryptography.MD5CryptoServiceProvider get_md5 = new System.Security.Cryptography.MD5CryptoServiceProvider(); byte[] hash_byte = get_md5.ComputeHash(get_file); string resule = System.BitConverter.ToString(hash_byte); resule = resule.Replace(\"-\", \"\"); return resule; &#125; catch (Exception e) &#123; return e.ToString(); &#125; &#125;&#125; 123456789101112131415161718192021222324using System;using System.Collections.Generic;using System.Text;using System.IO;using System.Security.Cryptography; public static void getFileMD5(string path)&#123; FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read); MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider(); byte[] md5byte = md5.ComputeHash(fs); int i, j; foreach (byte b in md5byte) &#123; i = Convert.ToInt32(b); j = i &gt;&gt; 4; Console.Write(Convert.ToString(j, 16)); j = ((i &lt;&lt; 4) &amp; 0x00ff) &gt;&gt; 4; Console.Write(Convert.ToString(j, 16)); &#125; Console.ReadLine();&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879public enum HashType&#123; MD5 = 0, SHA1=1&#125;public class Md5Checker&#123; /// &lt;summary&gt; /// 计算文件的 MD5 值 /// &lt;/summary&gt; /// &lt;param name=\"fileName\"&gt;要计算 MD5 值的文件名和路径&lt;/param&gt; /// &lt;returns&gt;MD5 值16进制字符串&lt;/returns&gt; public static string MD5File(string fileName) &#123; return HashFile(fileName, HashType.MD5); &#125; /// &lt;summary&gt; /// 计算文件的 SHA1 值 /// &lt;/summary&gt; /// &lt;param name=\"fileName\"&gt;要计算 SHA1 值的文件名和路径&lt;/param&gt; /// &lt;returns&gt;SHA1 值16进制字符串&lt;/returns&gt; public static string SHA1File(string fileName) &#123; return HashFile(fileName, HashType.SHA1); &#125; /// &lt;summary&gt; /// 计算文件的哈希值 /// &lt;/summary&gt; /// &lt;param name=\"fileName\"&gt;要计算哈希值的文件名和路径&lt;/param&gt; /// &lt;param name=\"algName\"&gt;算法:sha1,md5&lt;/param&gt; /// &lt;returns&gt;哈希值16进制字符串&lt;/returns&gt; public static string HashFile(string fileName, HashType hashType) &#123; if (!System.IO.File.Exists(fileName)) return string.Empty; FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read); byte[] hashBytes = HashData(fs, hashType); fs.Close(); return ByteArrayToHexString(hashBytes); &#125; /// &lt;summary&gt; /// 计算哈希值 /// &lt;/summary&gt; /// &lt;param name=\"stream\"&gt;要计算哈希值的 Stream&lt;/param&gt; /// &lt;param name=\"hashType\"&gt;算法:sha1,md5&lt;/param&gt; /// &lt;returns&gt;哈希值字节数组&lt;/returns&gt; public static byte[] HashData(Stream stream, HashType hashType) &#123; HashAlgorithm algorithm = null; switch (hashType) &#123; case HashType.MD5: algorithm = MD5.Create(); break; case HashType.SHA1: algorithm = SHA1.Create(); break; default: break; &#125; return algorithm.ComputeHash(stream); &#125; /// &lt;summary&gt; /// 字节数组转换为16进制表示的字符串 /// &lt;/summary&gt; public static string ByteArrayToHexString(byte[] buf) &#123; int iLen = 0; // 通过反射获取 MachineKeySection 中的 ByteArrayToHexString 方法，该方法用于将字节数组转换为16进制表示的字符串。 Type type = typeof(System.Web.Configuration.MachineKeySection); MethodInfo byteArrayToHexString = type.GetMethod(\"ByteArrayToHexString\", BindingFlags.Static | BindingFlags.NonPublic); // 字节数组转换为16进制表示的字符串 return (string)byteArrayToHexString.Invoke(null, new object[] &#123; buf, iLen &#125;); &#125;&#125;","categories":[{"name":"csharp","slug":"csharp","permalink":"http://www.yaosansi.com/categories/csharp/"}],"tags":[{"name":"c#","slug":"c","permalink":"http://www.yaosansi.com/tags/c/"},{"name":"md5","slug":"md5","permalink":"http://www.yaosansi.com/tags/md5/"}]},{"title":"C#利用WMI操作DNS服务器(可远程操作,需要相应权限)","slug":"csharp-operating-dns-server-with-wmi","date":"2006-11-04T06:39:33.000Z","updated":"2017-12-30T15:57:07.256Z","comments":true,"path":"post/csharp-operating-dns-server-with-wmi/","link":"","permalink":"http://www.yaosansi.com/post/csharp-operating-dns-server-with-wmi/","excerpt":"","text":"本文最后更新于：2006-11-04 14:39:33原文：http://www.yaosansi.com/post/csharp-operating-dns-server-with-wmi/ DNS测试类:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364using System;using System.Collections.Generic;using System.Text;using System.Data;namespace Yaosansi&#123; class Test &#123; static void Main() &#123; MyDnsTEST(); &#125; /// &lt;summary&gt; /// MyDnsTEST功能测试 /// C#利用WMI操作DNS服务器(可远程操作,需要相应权限) /// Author:yaosansi /// Create Date:2005-09-07 /// Modify Date:2006-10-25 /// Site:http://www.yaosansi.com/ /// E-mail:yaosansi at 126 dot com /// http://yaosansi.com/post/csharp-operating-dns-server-with-wmi/ /// http://yaosansi.cnblogs.com/archive/2006/11/04/DNSServiceInCsharpWithWMI.html /// 注意:此版本为WINDOWS2003 DNS服务器专用.不适合其它版本操作系统. /// &lt;/summary&gt; static void MyDnsTEST() &#123; Yaosansi.Net.MYDNS dns = new Yaosansi.Net.MYDNS(); //=========================================== //不对以下三个属性赋值默认DNS服务器为本机. dns.ServerName = \"202.96.64.68\"; dns.userName = \"Administrator\"; dns.passWord = \"123456789\"; //=========================================== //dns.CreateZone(\"yaosansi.com\"); //dns.DelZone(\"yaosansi.com\"); //dns.CreateAType(\"yaosansi.com\", \"www\", \"2.2.2.2\", \"3600\"); //dns.ModifyAType(\"yaosansi.com\",\"www\",\"127.21.0.1\",\"800\"); //dns.DelAType(\"yaosansi.com\", \"mail\"); //dns.CreateMXType(\"mail\", \"yaosansi.com\", \"5.5.5.5\", \"20\", \"3600\"); //dns.ModifyMXType(\"mail\", \"yaosansi.com\", \"36000\", \"218.1.1.1\", \"26\"); //dns.DelMXType(\"mail\", \"yaosansi.com\"); //dns.CreateCNAMEType(\"mpq2\", \"yaosansi.com\", \"www.yaosansi.com\", \"3900\"); //dns.ModifyCNAMEType(\"mpq2\", \"abc.com\", \"30520\", \"www.yaosansi.com.\"); //dns.DelCNAMEType(\"mpq\", \"yaosansi.com\"); //DataTable table = dns.ListExistsMXType(\"yaosansi.com\"); DataTable table = dns.ListExistsAType(\"yaosansi.com\"); //DataTable table = dns.ListExistsCNAMEType(\"yaosansi.com\"); Yaosansi.Data.DataHelp.PrintTable(table); if (!string.IsNullOrEmpty(dns.ErrMessage)) &#123; Console.WriteLine(\"--------------------------------------------------\"); Console.WriteLine(\"返回信息:\" + dns.ErrMessage); Console.WriteLine(\"--------------------------------------------------\"); &#125; Console.WriteLine(\"\"); Console.WriteLine(\"===End===\"); Console.ReadLine(); &#125; &#125;&#125; MYDNS类: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000100110021003100410051006100710081009101010111012101310141015101610171018101910201021102210231024102510261027102810291030103110321033103410351036103710381039104010411042104310441045104610471048104910501051105210531054105510561057105810591060106110621063106410651066106710681069107010711072107310741075107610771078107910801081108210831084108510861087108810891090using System;using System.Management;using System.Data;namespace Yaosansi.Net&#123; /// &lt;summary&gt; /// C#利用WMI操作DNS服务器(可远程操作,需要相应权限) /// Author:yaosansi /// Create Date:2005-09-07 /// Modify Date:2006-10-25 /// Site:http://www.yaosansi.com/ /// E-mail:yaosansi at 126 dot com /// http://yaosansi.com/post/csharp-operating-dns-server-with-wmi/ /// http://yaosansi.cnblogs.com/archive/2006/11/04/DNSServiceInCsharpWithWMI.html /// 注意:此版本为WINDOWS2003 DNS服务器专用.不适合其它版本操作系统. /// &lt;/summary&gt; public class MYDNS &#123; //要连接的DNS服务器 private string sServerPath; //用户名 private string username = null; //密码 private string password = null; //服务器名称或IP地址 private string DNSName = null; //表示管理操作的范围.这里是用来执行DNS的命名空间 private ManagementScope DNS; //用于返回检索的ManagementObject集合 private System.Management.ManagementObjectCollection Q; // private ManagementClass DnsClass; // private ManagementBaseObject MI; /// &lt;summary&gt; /// 返回的操作信息. /// &lt;/summary&gt; private string errMessage=null; /// &lt;summary&gt; /// 获取错误信息. /// &lt;/summary&gt; public string ErrMessage &#123; get &#123; return errMessage; &#125; &#125; /// &lt;summary&gt; /// 设置DNS服务器名称或IP地址 /// &lt;/summary&gt; public string ServerName &#123; set &#123; this.sServerPath = string.Format(@\"\\\\&#123;0&#125;\\root\\MicrosoftDNS\", value); this.DNSName = value; &#125; &#125; /// &lt;summary&gt; /// 设置连接服务器的用户名(指定服务器IP,用户和密码后将自动连接远程服务器,本机不需要指定) /// &lt;/summary&gt; public string userName &#123; set &#123; this.username = value; &#125; &#125; /// &lt;summary&gt; /// 设置连接服务器的密码(指定服务器IP,用户和密码后将自动连接远程服务器,本机不需要指定) /// &lt;/summary&gt; public string passWord &#123; set &#123; this.password = value; &#125; &#125; /// &lt;summary&gt; /// 构造函数 /// &lt;/summary&gt; public MYDNS() &#123; sServerPath = @\"\\\\localhost\\root\\MicrosoftDNS\"; DNSName = \"localhost\"; &#125; /// &lt;summary&gt; /// 建立对象.连接 /// &lt;/summary&gt; /// &lt;param name=\"DnsType\"&gt;DNS类型 MicrosoftDNS_Zone等&lt;/param&gt; private void Create(string DnsType) &#123; if (!string.IsNullOrEmpty(username) &amp;&amp; !string.IsNullOrEmpty(password)) &#123; System.Management.ConnectionOptions Conn = new ConnectionOptions(); Conn.Username = username; //用户名 Conn.Password = password; //口令 DNS = new ManagementScope(sServerPath,Conn); &#125; else &#123; DNS = new ManagementScope(sServerPath); &#125; if (!DNS.IsConnected) &#123; DNS.Connect(); &#125; ManagementPath Path = new ManagementPath(DnsType); this.DnsClass = new ManagementClass(DNS, Path, null); &#125; /// &lt;summary&gt; /// 查询DNS并建立对象 /// &lt;/summary&gt; /// &lt;param name=\"query\"&gt;WQL查询语句&lt;/param&gt; /// &lt;param name=\"DnsType\"&gt;DNS类型 MicrosoftDNS_Zone等&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public ManagementObjectCollection QueryDNS(string query, string DnsType) &#123; this.Create(DnsType); System.Management.ManagementObjectSearcher QS = new ManagementObjectSearcher(DNS, new ObjectQuery(query)); QS.Scope = DNS; return QS.Get(); &#125; /// &lt;summary&gt; /// 仅查询DNS /// &lt;/summary&gt; /// &lt;param name=\"query\"&gt;WQL查询语句&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public ManagementObjectCollection QueryDNS(string query) &#123; if (!string.IsNullOrEmpty(username) &amp;&amp; !string.IsNullOrEmpty(password)) &#123; System.Management.ConnectionOptions Conn = new ConnectionOptions(); Conn.Username = username; //用户名 Conn.Password = password; //口令 DNS = new ManagementScope(sServerPath, Conn); &#125; else &#123; DNS = new ManagementScope(sServerPath); &#125; if (!DNS.IsConnected) &#123; DNS.Connect(); &#125; System.Management.ManagementObjectSearcher QS = new ManagementObjectSearcher(DNS, new ObjectQuery(query)); QS.Scope = DNS; return QS.Get(); &#125; /// &lt;summary&gt; /// 判断区域是否存在 /// &lt;/summary&gt; /// &lt;param name=\"domain\"&gt;区域名称&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool IsExistsZone(string domain) &#123; try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_ZONE where ContainerName='\" + domain + \"'\"); foreach (ManagementObject oManObject in Q) &#123; //Console.WriteLine(oManObject[\"ContainerName\"].ToString()); return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 创建一个新的区域,仅区域名称 /// &lt;/summary&gt; /// &lt;param name=\"domain\"&gt;区域的名称&lt;/param&gt; public bool CreateZone(string domain) &#123; try &#123; this.Create(\"MicrosoftDNS_Zone\"); //如果区域已经存在 if (IsExistsZone(domain)) &#123; errMessage = \"域:\"+domain+\"已经存在.\"; return false; &#125; //建立新的区域 this.MI = DnsClass.GetMethodParameters(\"CreateZone\"); this.MI[\"ZoneName\"] = domain; this.MI[\"ZoneType\"] = 0; ManagementBaseObject OutParams = this.DnsClass.InvokeMethod(\"CreateZone\", MI, null); errMessage = \"域:\"+domain+\"创建成功.\"; return true; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 创建一个区域,包括其它参数 /// &lt;/summary&gt; /// &lt;param name=\"domain\"&gt;要创建的区域名称&lt;/param&gt; /// &lt;param name=\"ZoneType\"&gt;Type of zone. Valid values are the following:0 Primary zone. 1 Secondary zone. 2 Stub zone. 3 Zone forwarder. &lt;/param&gt; /// &lt;param name=\"DataFileName\"&gt;[in, optional] Name of the data file associated with the zone&lt;/param&gt; /// &lt;param name=\"IpAddr\"&gt;[in, optional] IP address of the mater DNS Server for the zone. &lt;/param&gt; /// &lt;param name=\"AdminEmailName\"&gt;[in, optional] Email address of the administrator responsible for the zone&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool CreateZone(string domain, uint ZoneType, string DataFileName, string[] IpAddr, string AdminEmailName) &#123; try &#123; this.Create(\"MicrosoftDNS_Zone\"); //如果区域已经存在 if (IsExistsZone(domain)) &#123; errMessage = \"域:\" + domain + \"已经存在.\"; return false; &#125; //建立新的区域 MI = DnsClass.GetMethodParameters(\"CreateZone\"); MI[\"ZoneName\"] = domain; MI[\"ZoneType\"] = ZoneType; MI[\"DataFileName\"] = DataFileName; MI[\"IpAddr\"] = IpAddr; MI[\"AdminEmailName\"] = AdminEmailName; ManagementBaseObject OutParams = this.DnsClass.InvokeMethod(\"CreateZone\", MI, null); errMessage = \"域:\" + domain + \"创建成功.\"; return true; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 修改区域 /// &lt;/summary&gt; /// &lt;param name=\"domain\"&gt;要修改的区域名称&lt;/param&gt; /// &lt;param name=\"ZoneType\"&gt;Type of zone. Valid values are the following:0 Primary zone. 1 Secondary zone. 2 Stub zone. 3 Zone forwarder. &lt;/param&gt; /// &lt;param name=\"DataFileName\"&gt;[in, optional] Name of the data file associated with the zone&lt;/param&gt; /// &lt;param name=\"IpAddr\"&gt;[in, optional] IP address of the mater DNS Server for the zone. &lt;/param&gt; /// &lt;param name=\"AdminEmailName\"&gt;[in, optional] Email address of the administrator responsible for the zone&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool ChangeZoneType(string domain, uint ZoneType, string DataFileName, string[] IpAddr, string AdminEmailName) &#123; try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_ZONE where ContainerName='\" + domain + \"'\", \"MicrosoftDNS_Zone\"); foreach (ManagementObject oManObject in Q) &#123; MI = oManObject.GetMethodParameters(\"ChangeZoneType\"); MI[\"ZoneType\"] = ZoneType; MI[\"DataFileName\"] = DataFileName; MI[\"IpAddr\"] = IpAddr; MI[\"AdminEmailName\"] = AdminEmailName; oManObject.InvokeMethod(\"ChangeZoneType\", MI, null); errMessage = \"域:\" + domain + \"修改成功.\"; return true; &#125; errMessage = \"未找到域:\"+domain; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 删除区域 /// &lt;/summary&gt; /// &lt;param name=\"domain\"&gt;要册除的区域的名称&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool DelZone(string domain) &#123; try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_ZONE where ContainerName='\" + domain + \"'\", \"MicrosoftDNS_Zone\"); foreach (ManagementObject oManObject in Q) &#123; oManObject.Delete(); errMessage = \"域:\" + domain + \"删除成功.\"; return true; &#125; errMessage = \"未找到域:\" + domain; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 判断在某MicrosoftDNS_AType是否在指定的域中存在 /// &lt;/summary&gt; /// &lt;param name=\"domain\"&gt;&lt;/param&gt; /// &lt;param name=\"OwnerName\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool IsExistsAType(string domain, string OwnerName) &#123; try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_AType where OwnerName='\" + OwnerName + \"' and ContainerName='\" + domain + \"'\"); foreach (ManagementObject oManObject in Q) &#123; //Console.WriteLine(oManObject[\"OwnerName\"].ToString()); return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 创建MicrosoftDNS_AType /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;Name of the Container for the Zone, Cache, or RootHints instance which contains this RR&lt;/param&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"TTL\"&gt;Time, in seconds, that the RR can be cached by a DNS resolver&lt;/param&gt; /// &lt;param name=\"IPAddress\"&gt;String representing the IPv4 address of the host&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool CreateAType(string ContainerName, string HostName, string IPAddress,string TTL) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_AType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); return false; &#125; if (IsExistsAType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName, OwnerName); return false; &#125; MI = DnsClass.GetMethodParameters(\"CreateInstanceFromPropertyData\"); MI[\"DnsServerName\"] = \"localhost\"; MI[\"ContainerName\"] = ContainerName; MI[\"OwnerName\"] = OwnerName; MI[\"IPAddress\"] = IPAddress; if (string.IsNullOrEmpty(TTL)) &#123; TTL = \"3600\"; &#125; MI[\"TTL\"] =TTL; DnsClass.InvokeMethod(\"CreateInstanceFromPropertyData\", MI, null); errMessage = \"A记录:\" + OwnerName + \"创建成功.\"; return true; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 创建MicrosoftDNS_AType /// &lt;/summary&gt; /// &lt;param name=\"DnsServerName\"&gt;FQDN or IP address of the DNS Server that contains this RR&lt;/param&gt; /// &lt;param name=\"ContainerName\"&gt;Name of the Container for the Zone, Cache, or RootHints instance which contains this RR&lt;/param&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"RecordClass\"&gt;Class of the RR. Default value is 1. The following values are valid.1 IN (Internet) 2 CS (CSNET) 3 CH (CHAOS) 4 HS (Hesiod) &lt;/param&gt; /// &lt;param name=\"TTL\"&gt;Time, in seconds, that the RR can be cached by a DNS resolver&lt;/param&gt; /// &lt;param name=\"IPAddress\"&gt;String representing the IPv4 address of the host&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool CreateAType(string DnsServerName, string ContainerName, string HostName, uint RecordClass, uint TTL, string IPAddress) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_AType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); return false; &#125; if (IsExistsAType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName, OwnerName); errMessage=string.Format(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName, OwnerName); return false; &#125; MI = DnsClass.GetMethodParameters(\"CreateInstanceFromPropertyData\"); MI[\"DnsServerName\"] = DnsServerName; MI[\"ContainerName\"] = ContainerName; MI[\"OwnerName\"] = OwnerName; MI[\"RecordClass\"] = RecordClass; MI[\"TTL\"] = TTL; MI[\"IPAddress\"] = IPAddress; DnsClass.InvokeMethod(\"CreateInstanceFromPropertyData\", MI, null); errMessage = \"A记录:\" + OwnerName + \"创建成功.\"; return true; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 修改MicrosoftDNS_AType /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;Name of the Container for the Zone, Cache, or RootHints instance which contains this RR&lt;/param&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"TTL\"&gt;Time, in seconds, that the RR can be cached by a DNS resolver&lt;/param&gt; /// &lt;param name=\"IPAddress\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool ModifyAType(string ContainerName, string HostName, string IPAddress,string TTL) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,修改失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,修改失败\", ContainerName); return false; &#125; if (!IsExistsAType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中不存在&#123;1&#125;,修改失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,修改失败\", ContainerName, OwnerName); return false; &#125; Q = QueryDNS(\"Select * From MicrosoftDNS_AType where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\", \"MicrosoftDNS_AType\"); foreach (ManagementObject oManObject in Q) &#123; //foreach (PropertyData p in oManObject.Properties) //&#123; // try // &#123; Console.WriteLine(p.Name+\"=\"+oManObject[p.Name]); &#125; // catch // &#123; &#125; //&#125; if (oManObject[\"IPAddress\"].ToString() == IPAddress) &#123; errMessage = \"A记录:\" + OwnerName + \"修改失败,必须修改IP地址.\"; return false; &#125; MI = oManObject.GetMethodParameters(\"Modify\"); MI[\"IPAddress\"] = IPAddress; MI[\"TTL\"] = TTL; oManObject.InvokeMethod(\"Modify\", MI, null); errMessage = \"A记录:\" + OwnerName + \"修改成功.\"; return true; &#125; errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,修改失败\", ContainerName, OwnerName); return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 删除MicrosoftDNS_AType /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;Name of the Container for the Zone, Cache, or RootHints instance which contains this RR&lt;/param&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool DelAType(string ContainerName, string HostName) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,删除失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,删除失败\", ContainerName); return false; &#125; if (!IsExistsAType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中不存在&#123;1&#125;,删除失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,删除失败\", ContainerName, OwnerName); return false; &#125; Q = QueryDNS(\"Select * From MicrosoftDNS_AType where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\", \"MicrosoftDNS_AType\"); foreach (ManagementObject oManObject in Q) &#123; oManObject.Delete(); errMessage = \"A记录:\" + OwnerName + \"删除成功.\"; return true; &#125; errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,删除失败\", ContainerName, OwnerName); return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 列出某域名下的所有A记录. /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;Name of the Container for the Zone, Cache, or RootHints instance which contains this RR&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public DataTable ListExistsAType(string ContainerName) &#123; Yaosansi.IO.Log log = new Yaosansi.IO.Log(); log.WirteLogTime(); log.WirteLog(ContainerName); DataTable table = new DataTable(\"MicrosoftDNS_AType\" + ContainerName); table.Columns.Add(\"主机名 (A)\"); table.Columns.Add(\"IP 地址\"); table.Columns.Add(\"TTL\"); try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_AType where ContainerName='\" + ContainerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; try &#123; DataRow row = table.NewRow(); row[\"主机名 (A)\"] = oManObject[\"OwnerName\"]; row[\"IP 地址\"] = oManObject[\"IPAddress\"]; row[\"TTL\"] = oManObject[\"TTL\"]; table.Rows.Add(row); &#125; catch (Exception e) &#123; log.WirteLog(e.ToString()); &#125; &#125; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); log.WirteLog(e.ToString()); &#125; Yaosansi.Data.DataHelp.PrintTableLog(table); return table; &#125; /// &lt;summary&gt; /// 列出某域名下的所有MX记录. /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;Name of the Container for the Zone, Cache, or RootHints instance which contains this RR&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public DataTable ListExistsMXType(string ContainerName) &#123; DataTable table = new DataTable(\"MicrosoftDNS_MXType\" + ContainerName); table.Columns.Add(\"邮件交换记录 (MX)\"); table.Columns.Add(\"目标主机\"); table.Columns.Add(\"优先级\"); table.Columns.Add(\"TTL\"); try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_MXType where ContainerName='\" + ContainerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; try &#123; DataRow row = table.NewRow(); row[\"目标主机\"] = oManObject[\"MailExchange\"]; row[\"邮件交换记录 (MX)\"] = oManObject[\"OwnerName\"]; row[\"优先级\"] = oManObject[\"Preference\"]; row[\"TTL\"] = oManObject[\"TTL\"]; table.Rows.Add(row); &#125; catch &#123; &#125; &#125; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); &#125; return table; &#125; /// &lt;summary&gt; /// 列出某域名下的所有别名. /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;Name of the Container for the Zone, Cache, or RootHints instance which contains this RR&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public DataTable ListExistsCNAMEType(string ContainerName) &#123; DataTable table = new DataTable(\"MicrosoftDNS_CNAMEType\" + ContainerName); table.Columns.Add(\"别名 (CNAME)\"); table.Columns.Add(\"别名主机\"); table.Columns.Add(\"TTL\"); try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_CNAMEType where ContainerName='\" + ContainerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; try &#123; DataRow row = table.NewRow(); row[\"别名 (CNAME)\"] = oManObject[\"OwnerName\"]; row[\"别名主机\"] = oManObject[\"PrimaryName\"]; row[\"TTL\"] = oManObject[\"TTL\"]; table.Rows.Add(row); &#125; catch &#123; &#125; &#125; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); &#125; return table; &#125; /// &lt;summary&gt; /// 判断在某MicrosoftDNS_MXType是否在指定的域中存在 /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;主域名 主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;param name=\"OwnerName\"&gt;Owner name for the RR. &lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool IsExistsMXType(string ContainerName, string OwnerName) &#123; try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_MXType Where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; // Console.WriteLine(oManObject[\"MailExchange\"].ToString()); return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 创建MicrosoftDNS_MXType记录(邮件交换记录) /// &lt;/summary&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"ContainerName\"&gt;主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;param name=\"MailExchange\"&gt;目标主机 FQDN specifying a host willing to act as a mail exchange for the owner name&lt;/param&gt; /// &lt;param name=\"Preference\"&gt;优先级 Preference given to this RR among others at the same owner. Lower values are preferred&lt;/param&gt; /// &lt;param name=\"TTL\"&gt;Time, in seconds, that the RR can be cached by a DNS resolver&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool CreateMXType(string HostName, string ContainerName,string MailExchange, string Preference, string TTL) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_MXType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); return false; &#125; if (IsExistsMXType(ContainerName,OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName,OwnerName ); errMessage = string.Format(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName, OwnerName); return false; &#125; MI = DnsClass.GetMethodParameters(\"CreateInstanceFromPropertyData\"); MI[\"DnsServerName\"] = \"localhost\"; MI[\"ContainerName\"] = ContainerName; // MI[\"RecordClass\"] = 1; //Default value is 1. //1 IN (Internet) //2 CS (CSNET) //3 CH (CHAOS) //4 HS (Hesiod) MI[\"MailExchange\"] = MailExchange; MI[\"OwnerName\"] = OwnerName; MI[\"Preference\"] = Preference; if (string.IsNullOrEmpty(TTL)) &#123; TTL = \"3600\"; &#125; MI[\"TTL\"] = TTL; DnsClass.InvokeMethod(\"CreateInstanceFromPropertyData\", MI, null); errMessage = \"MX记录:\" + OwnerName + \"创建成功.\"; return true; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 修改MicrosoftDNS_MXType记录(修改邮件交换记录) /// &lt;/summary&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"ContainerName\"&gt;主域名 主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;param name=\"TTL\"&gt;[in, optional] Time, in seconds, that the RR can be cached by a DNS resolver. &lt;/param&gt; /// &lt;param name=\"MailExchange\"&gt;[in, optional] FQDN specifying a host willing to act as a mail exchange for the owner name. &lt;/param&gt; /// &lt;param name=\"Preference\"&gt;邮件优先级 [in, optional] Preference given to this RR among others at the same owner. Lower values are preferred. &lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool ModifyMXType(string HostName, string ContainerName, string TTL, string MailExchange,string Preference) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_MXType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,修改失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,修改失败\", ContainerName); return false; &#125; if (!IsExistsMXType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中不存在&#123;1&#125;,修改失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,修改失败\", ContainerName, OwnerName); return false; &#125; Q = QueryDNS(\"Select * From MicrosoftDNS_MXType Where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; MI = oManObject.GetMethodParameters(\"Modify\"); if (string.IsNullOrEmpty(TTL)) &#123; TTL = \"3600\"; &#125; if (ClearEndDot(oManObject[\"MailExchange\"].ToString()) == ClearEndDot(MailExchange) &amp;&amp; oManObject[\"Preference\"].ToString() == Preference) &#123; errMessage = \"MX记录:\" + OwnerName + \"修改失败,必须修改目标主机或邮件优先级.\"; return false; &#125; MI[\"TTL\"] = TTL; MI[\"MailExchange\"] = MailExchange; MI[\"Preference\"] = Preference; oManObject.InvokeMethod(\"Modify\", MI, null); errMessage = \"MX记录:\" + OwnerName + \"修改成功.\"; return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 删除MicrosoftDNS_MXType /// &lt;/summary&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"ContainerName\"&gt;主域名 主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool DelMXType(string HostName, string ContainerName) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_MXType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,删除失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,删除失败\", ContainerName); return false; &#125; if (!IsExistsMXType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中不存在&#123;1&#125;,删除失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,删除失败\", ContainerName, OwnerName); return false; &#125; Q = QueryDNS(\"Select * From MicrosoftDNS_MXType Where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; oManObject.Delete(); errMessage = \"MX记录:\" + OwnerName + \"删除成功.\"; return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 判断在某MicrosoftDNS_CNAMEType是否在指定的域中存在 /// &lt;/summary&gt; /// &lt;param name=\"ContainerName\"&gt;主域名 主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;param name=\"OwnerName\"&gt;Owner name for the RR. &lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool IsExistsCNAMEType(string ContainerName, string OwnerName) &#123; try &#123; Q = QueryDNS(\"Select * From MicrosoftDNS_CNAMEType Where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; // Console.WriteLine(oManObject[\"MailExchange\"].ToString()); return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 创建MicrosoftDNS_CNAMEType记录(别名) /// &lt;/summary&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"ContainerName\"&gt;主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;param name=\"PrimaryName\"&gt;in] Primary name of the CNAME RR&lt;/param&gt; /// &lt;param name=\"TTL\"&gt;Time, in seconds, that the RR can be cached by a DNS resolver&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool CreateCNAMEType(string HostName, string ContainerName, string PrimaryName, string TTL) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_CNAMEType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,创建失败\", ContainerName); return false; &#125; if (IsExistsCNAMEType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中已存在&#123;1&#125;,创建失败\", ContainerName, OwnerName); return false; &#125; MI = DnsClass.GetMethodParameters(\"CreateInstanceFromPropertyData\"); MI[\"DnsServerName\"] = \"localhost\"; MI[\"ContainerName\"] = ContainerName; // MI[\"RecordClass\"] = 1; //Default value is 1. //1 IN (Internet) //2 CS (CSNET) //3 CH (CHAOS) //4 HS (Hesiod) MI[\"PrimaryName\"] = PrimaryName; MI[\"OwnerName\"] = OwnerName; if (string.IsNullOrEmpty(TTL)) &#123; TTL = \"3600\"; &#125; MI[\"TTL\"] = TTL; DnsClass.InvokeMethod(\"CreateInstanceFromPropertyData\", MI, null); errMessage = \"CNAME:\" + OwnerName + \"创建成功.\"; return true; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 修改MicrosoftDNS_CNAMEType记录(别名) /// &lt;/summary&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"ContainerName\"&gt;主域名 主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;param name=\"TTL\"&gt;[in, optional] Time, in seconds, that the RR can be cached by a DNS resolver. &lt;/param&gt; /// &lt;param name=\"PrimaryName\"&gt;in] Primary name of the CNAME RR&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool ModifyCNAMEType(string HostName, string ContainerName, string TTL, string PrimaryName) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_CNAMEType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,修改失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,修改失败\", ContainerName); return false; &#125; if (!IsExistsCNAMEType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中不存在&#123;1&#125;,修改失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,修改失败\", ContainerName, OwnerName); return false; &#125; Q = QueryDNS(\"Select * From MicrosoftDNS_CNAMEType Where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; if (ClearEndDot(oManObject[\"PrimaryName\"].ToString()) == ClearEndDot(PrimaryName)) &#123; errMessage = \"CName记录:\" + OwnerName + \"修改失败,必须修改别名主机.\"; return false; &#125; MI = oManObject.GetMethodParameters(\"Modify\"); if (string.IsNullOrEmpty(TTL)) &#123; TTL = \"3600\"; &#125; MI[\"TTL\"] = TTL; MI[\"PrimaryName\"] = PrimaryName; oManObject.InvokeMethod(\"Modify\", MI, null); errMessage = \"CNAME:\" + OwnerName + \"修改成功.\"; return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 删除MicrosoftDNS_CNAMEType /// &lt;/summary&gt; /// &lt;param name=\"HostName\"&gt;主机名 [如果为空或NULL,主机名将与域名保持一致.]&lt;/param&gt; /// &lt;param name=\"ContainerName\"&gt;主域名 主域 Name of the Container for the Zone, Cache, or RootHints instance that contains this RR.&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool DelCNAMEType(string HostName, string ContainerName) &#123; try &#123; string OwnerName = null; if (string.IsNullOrEmpty(HostName)) &#123; OwnerName = ContainerName; &#125; else &#123; OwnerName = HostName + \".\" + ContainerName; &#125; this.Create(\"MicrosoftDNS_CNAMEType\"); //如果区域不存在 if (!IsExistsZone(ContainerName)) &#123; Console.WriteLine(\"区域:&#123;0&#125;不存在,删除失败\", ContainerName); errMessage = string.Format(\"区域:&#123;0&#125;不存在,删除失败\", ContainerName); return false; &#125; if (!IsExistsCNAMEType(ContainerName, OwnerName)) &#123; Console.WriteLine(\"&#123;0&#125;中不存在&#123;1&#125;,删除失败\", ContainerName, OwnerName); errMessage = string.Format(\"&#123;0&#125;中不存在&#123;1&#125;,删除失败\", ContainerName, OwnerName); return false; &#125; Q = QueryDNS(\"Select * From MicrosoftDNS_CNAMEType Where ContainerName='\" + ContainerName + \"' and OwnerName='\" + OwnerName + \"'\"); foreach (ManagementObject oManObject in Q) &#123; oManObject.Delete(); errMessage = \"CNAME:\" + OwnerName + \"删除成功.\"; return true; &#125; return false; &#125; catch (Exception e) &#123; errMessage = e.Message; Console.WriteLine(e.ToString()); return false; &#125; &#125; /// &lt;summary&gt; /// 去除以.结尾的字符串的. /// &lt;/summary&gt; /// &lt;param name=\"str\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; private string ClearEndDot(string str) &#123; string returnStr = str; if (!string.IsNullOrEmpty(str)) &#123; int l = str.LastIndexOf(\".\"); if (l != -1 &amp;&amp; l == str.Length - 1) &#123; returnStr = str.Substring(0, str.Length - 1); &#125; &#125; return returnStr; &#125; &#125;&#125;","categories":[{"name":"csharp","slug":"csharp","permalink":"http://www.yaosansi.com/categories/csharp/"}],"tags":[{"name":"c#","slug":"c","permalink":"http://www.yaosansi.com/tags/c/"},{"name":"dns","slug":"dns","permalink":"http://www.yaosansi.com/tags/dns/"}]}]}